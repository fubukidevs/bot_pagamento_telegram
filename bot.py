import nest_asyncio, asyncio, os, requests, queue, json, re, threading

import manager, payment

from multiprocessing import Process
from asyncio import Lock
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackContext, CallbackQueryHandler, ContextTypes, ConversationHandler, MessageHandler, filters, Updater, CallbackContext, ChatJoinRequestHandler
from telegram.error import BadRequest, Conflict

from flask import Flask, request, jsonify
from flask_cors import CORS

from datetime import datetime, timedelta
from urllib.parse import urlparse

async def verificar_chat_existe(chat_id: int) -> bool:
    bot_instance = bot_application.bot
    """
    Verifica se um chat de usu√°rio existe no Telegram.

    Args:
        bot (Bot): Inst√¢ncia do bot do Telegram.
        chat_id (int): ID do chat do usu√°rio.

    Returns:
        bool: Retorna True se o chat existir, False caso contr√°rio.
    """
    try:
        # Tenta buscar informa√ß√µes do chat
        await bot_instance.get_chat(chat_id)
        return True
    except (BadRequest):
        # BadRequest ou Unauthorized indicam que o chat n√£o existe ou n√£o est√° acess√≠vel
        return False

cache = {
    'url':'',
    'plano':{
        'tempo':0,
        'tipo':'',
        'message':None
    },
    'payments':{},
    'recovery':[],
    'users_waiting':{}
}
CANCEL = 0
MEDIA, TEXT, LINK, CONFIRM = range(4)
INPUT_DESCONTO_RECUPERACAO, CONFIGURAR_RECUPERACAO, INPUT_MEDIA_RECUPERACAO, INPUT_TEXTO_RECUPERACAO, INPUT_TEMPO_RECUPERACAO = range(5)
SELECIONAR_MENSAGEM_DELETAR = 23
INPUT_UPSELL_LINK = 24  # Novo estado para o link do bot√£o upsell
SELECIONAR_MENSAGEM = 16
CONFIRMAR_CRIACAO = 20  # Novo estado para a confirma√ß√£o da cria√ß√£o do plano
INPUT_REMOVER_TEXTO = 9
INPUT_TOKEN = 6
INPUT_REMOVER_MIDIA = 8
SELECT_PLAN_TO_DELETE = 10
INPUT_UPSELL_CONTENT = 22
INPUT_PLAN_NAME = 3
INPUT_PLAN_DURATION = 4
INPUT_UPSELL = 21
INPUT_TEXT_BUTTON = range(1)
INPUT_PLAN_VALUE = 5
INPUT_GRUPO_ID = 7  # Novo estado para o ID do grupo 
INPUT_MEDIA_DISPARO = 101
INPUT_TEXT_DISPARO = 102
INPUT_LINK_DISPARO = 103
INPUT_PLAN_CUSTON = 105
TOKEN_RETRY = 104

master_config = json.loads(open('./config.json', 'r').read())
app = Flask(__name__)
CORS(app)  # Permite que o aplicativo Flask aceite requisi√ß√µes de qualquer origem


SEU_CLIENT_ID = 4160833868783446
IP_DA_API = master_config['url']
URL_REDIRECT = IP_DA_API+'/callback'



# Fun√ß√£o para verificar se um usu√°rio √© administrador de um bot espec√≠fico

async def notificar_admin(chat_id, plano_escolhido):
    bot_instance = bot_application.bot
    try:
        user = await bot_instance.get_chat(int(chat_id))
        username = user.username or "N√£o definido"
        first_name = user.first_name or "N√£o definido"

        mensagem_venda = (
            f"‚úÖ Venda realizada!\n\n"
            f"üÜî Clientid: {chat_id}\n"
            f"üë§ User: @{username}\n"
            f"üìù Nome: {first_name}\n"
            f"üíµ Valor: R$ {str(plano_escolhido['valor']).replace('.', ',')}\n"
            f"üîó Plano: {plano_escolhido['nome']}"
        )
        await bot_instance.send_message(chat_id=int(cache['owner']), text=mensagem_venda)
    except Exception as e:
        print(f'[ERROR] Erro ao notificar admin? {e}')

async def disparar_recuperacao(chat_id, payment_id):
    bot_instance = bot_application.bot
    bot_id = cache['bot_id']
    print(f'recupera√ß√£o {chat_id}:{payment_id}')
    configuracoes_recuperacao = load_recuperacao_config(bot_id)

    try:
        paid = manager.get_payment_by_id(payment_id)[4]
        index = 0
        for config in configuracoes_recuperacao:
            await asyncio.sleep(config.get('tempo')*60)
            if paid != 'paid' and not cache['payments'][payment_id]['invited']:  
                # Configura√ß√£o do bot√£o "Pagar Agora"
                keyboard = [[InlineKeyboardButton("Pagar Agora", callback_data=f"pagar_{payment_id}_{index}")]]
                reply_markup = InlineKeyboardMarkup(keyboard)

                media_content = config.get("midia")
                media_type = config.get("tipo", "photo")  # Padr√£o para 'photo'

                try:
                    if media_content:
                        if media_type == "photo":
                            await bot_instance.send_photo(chat_id=chat_id, photo=media_content, caption=config.get("texto"), reply_markup=reply_markup)
                            print(f"[INFO] Foto enviada com sucesso para chat_id {chat_id}")
                        elif media_type == "video":
                            await bot_instance.send_video(chat_id=chat_id, video=media_content, caption=config.get("texto"), reply_markup=reply_markup)
                            print(f"[INFO] V√≠deo enviado com sucesso para chat_id {chat_id}")
                        else:
                            # Fallback para tentar como foto, depois v√≠deo
                            try:
                                await bot_instance.send_photo(chat_id=chat_id, photo=media_content, caption=config.get("texto"), reply_markup=reply_markup)
                                print(f"[INFO] Foto enviada com sucesso (fallback) para chat_id {chat_id}")
                            except Exception as e_photo:
                                print(f"[WARNING] Falha ao enviar como foto, tentando como v√≠deo. Erro: {e_photo}")
                                await bot_instance.send_video(chat_id=chat_id, video=media_content, caption=config.get("texto"), reply_markup=reply_markup)
                                print(f"[INFO] V√≠deo enviado com sucesso (fallback) para chat_id {chat_id}")
                    else:
                        #bot_instance = bot_application.bot
                        # Caso n√£o haja m√≠dia, apenas envia a mensagem de texto
                        await bot_instance.send_message(chat_id=chat_id, text=config["texto"], reply_markup=reply_markup)
                        print(f"[INFO] Mensagem de texto enviada com sucesso para chat_id {chat_id}")
                except Exception as e:
                        print(f"[ERROR] Falha ao enviar a m√≠dia ou mensagem: {e}")
            else:
                return
    except Exception as e:
        print(f"[ERROR] Erro inesperado durante o ciclo de recupera√ß√£o: {e}")


async def disparar_upsell(chat_id):
    bot_instance = bot_application.bot
    upsell_message = load_upsell(cache['bot_id'])

    # Verifica se h√° upsell configurado
    if upsell_message and (upsell_message.get('media') or upsell_message.get('text')):
        upsell_text = upsell_message.get('text', 'Confira essa oferta especial!')
        upsell_link = upsell_message.get('link', 'https://default-link.com')  # Link padr√£o

                    # Envia a m√≠dia de upsell, se houver
        if upsell_message.get('media'):
            try:
                if upsell_message['type'] == 'photo':
                    await bot_instance.send_photo(chat_id=chat_id, photo=upsell_message['media'])
                    print("[DEBUG] Foto de upsell enviada")
                elif upsell_message['type'] == 'video':
                    await bot_instance.send_video(chat_id=chat_id, video=upsell_message['media'])
                    print("[DEBUG] V√≠deo de upsell enviado")
            except Exception as e:
                print(f"[ERRO] Erro ao enviar m√≠dia de upsell: {e}")

            # Envia o texto com o bot√£o
            upsell_keyboard = [[InlineKeyboardButton("‚úÖ  ùóîùóñùóòùóúùóßùóîùó• ùó¢ùóôùóòùó•ùóßùóî", url=upsell_link)]]
            reply_markup = InlineKeyboardMarkup(upsell_keyboard)
            try:
                await bot_instance.send_message(chat_id=chat_id, text=upsell_text, reply_markup=reply_markup)
            except Exception as e:
                print(f"[ERRO] Erro ao enviar mensagem para chat_id {chat_id}: {e}")

async def gerar_convite(user_chat, user):
    bot_instance = bot_application.bot
    try:
        # Carrega as informa√ß√µes do grupo
        grupo_info = load_grupo_id(bot_id=cache['bot_id'])
        print(grupo_info)
        # Cria o link de convite com solicita√ß√£o de entrada ativada
        
        
        group_invite_link = await bot_instance.create_chat_invite_link(
            chat_id=grupo_info, 
            creates_join_request=True
        )
        nickname = user.username
        # Adiciona o usu√°rio √† lista de espera para verificar ao entrar no grupo
        cache['users_waiting'][nickname] = str(user_chat)


        keyboard = [
            [InlineKeyboardButton("ENTRAR NO GRUPO", url=group_invite_link.invite_link)]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await bot_instance.send_message(
            chat_id=user_chat,
            text="‚úÖ Pagamento aprovado! Clique no bot√£o abaixo para entrar no grupo.",
            reply_markup=reply_markup
        )
        print(f"[INFO] Link de convite criado com sucesso: {group_invite_link.invite_link}")
    except ValueError as ve:
        print(f"[ERRO] Erro no ID do grupo: {ve}")
        await bot_instance.send_message(
            chat_id=user_chat,
            text="‚ùå N√£o foi poss√≠vel identificar o grupo. Por favor, entre em contato com o suporte."
        )
    except Exception as e:
        print(f"[ERRO] Erro ao criar link de grupo: {e}")
        await bot_instance.send_message(
            chat_id=user_chat,
            text="‚ùå Ocorreu um erro ao gerar o link de convite. Por favor, tente novamente mais tarde."
        )



async def check_join_request(update: Update, context: CallbackContext):
    join_request = update.chat_join_request  # Detalhes da solicita√ß√£o de entrada
    user = join_request.from_user
    if str(user.username) in cache['users_waiting'].keys():
        await join_request.approve()
        await disparar_upsell(cache['users_waiting'][user.username])
        cache['users_waiting'].pop(user.username)
    #else:
        #print(f'usuario {user.username} barrado de entrar no grupo do bot {cache["bot_id"]}')
        #await join_request.decline()


#update.message.from_user


def add_payment_info(id, chat):   
    payment_object = {'chat':chat, 'recovery':[], 'invited':False}
    cache['payments'][id] = payment_object
    cache['payments'][id]['recovery_thread'] = asyncio.create_task(disparar_recuperacao(chat, id))

def add_payment_recovery(id, recovery):
    if id in cache['payments'].keys():
        cache['payments'][id]['recovery'].append(recovery) 


def remove_payment_info(id):
    cache['payments'].pop(id)

def expire_payment_info(id):
    #cache['payments'].pop(id)
    manager.update_payment_status(id, 'expired')

async def finalizar_compra(base_payment_id, user_chat, user, plano_escolhido):
    await gerar_convite(user_chat, user)
    await notificar_admin(cache['owner'], plano_escolhido)
    
    adicionar_usuario_expiracao(
                bot_id=cache['bot_id'],
                user_id=user_chat,
                grupo_id=cache['grupo'],
                duracao=calcular_duracao(plano_escolhido["duracao"])
                )
    cache['payments'][base_payment_id]['invited'] = True


async def payment_task():
    bot_instance = bot_application.bot

    print('payment task')
    while True:
        payment_cache = list(cache['payments'].keys())
        if len(payment_cache) > 0:
            payment.atualizar_pagamentos()
            for payment_id in payment_cache:
                if payment_id in cache['payments'].keys():
                    
                    user_chat = cache['payments'][payment_id]['chat']
                    user = await bot_instance.get_chat(user_chat)
                    
                        
                    if not cache['payments'][payment_id]['invited']:
                        payment_data = manager.get_payment_by_id(payment_id)
                        if payment_data[4] == 'paid':
                            print('pago normal')
                            plano_escolhido = json.loads(payment_data[2])
                            await finalizar_compra(payment_id, user_chat, user, plano_escolhido)
                        else:
                            keys = [payment_id]
                            try:
                                for key in cache['payments'][payment_id]['recovery']:
                                    print(key)
                                    if key != False:
                                        payment_data = manager.get_payment_by_id(key)
                                        if payment_data[4] == 'paid':
                                            plano_escolhido = json.loads(payment_data[2])
                                            print('pago na rec')
                                            await finalizar_compra(payment_id, user_chat, user, plano_escolhido)
                            except Exception as e:
                                print(f'ERRO AO VERIFICAR PAGAMENTOS DE REC {e}')
        await asyncio.sleep(5)      

def is_admin(chat_id):
    if str(chat_id) == str(cache['owner']):
        return True
    else:
        return False

bot_application = None
message_queue = queue.Queue()  # Fila para comunica√ß√£o entre threads

def load_recuperacao_config(bot_id):
    bot = manager.get_bot_by_id(bot_id)
    if bot:
        config = json.loads(bot[5])
        return config
    else:
        return False
        
def load_grupo_id(bot_id):
    bot = manager.get_bot_by_id(bot_id)
    if bot:
        return int(bot[10])
    else: 
        return False
# Fun√ß√£o para o comando /texto_botao
async def texto_botao(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("Comando /texto_botao iniciado.")

    # Verifica se h√° outro comando ativo
    if await verificar_comando_ativo(update, context):
        print("Encerrando /texto_botao devido a comando ativo.")
        return ConversationHandler.END

    await reset_conversation(update, context)  # Limpa conversas anteriores
    chat_id = update.effective_chat.id
    bot_token = context.bot.token  # Obt√©m o token do bot atual

    # Verifica se o usu√°rio √© administrador do bot atual
    if not is_admin(chat_id):
        print("Usu√°rio n√£o autorizado para /texto_botao.")
        context.user_data['conversacao_ativa'] = False
        return ConversationHandler.END

    # Obt√©m o bot_id para salvar a configura√ß√£o corretamente
    bot_id = context.user_data.get('bot_id') or context.bot_data.get('bot_id')
    if bot_id is None:
        await update.message.reply_text("Erro ao identificar o bot_id. Por favor, tente novamente.")
        print("Erro: bot_id n√£o identificado.")
        
        return ConversationHandler.END

    # Salva o bot_id no user_data para uso na pr√≥xima etapa
    context.user_data['bot_id'] = bot_id
    context.user_data['conversacao_ativa'] = True

    # Solicita o texto do bot√£o ao usu√°rio
    await update.message.reply_text("Envie o texto do bot√£o inicial que deseja definir.")
    print("Solicita√ß√£o de texto do bot√£o enviada com sucesso.")

    return INPUT_TEXT_BUTTON



# Fun√ß√£o para salvar o novo texto do bot√£o no JSON do bot
async def salvar_texto_botao(update: Update, context: ContextTypes.DEFAULT_TYPE):
    bot_id = context.user_data.get('bot_id')
    if bot_id is None:
        await update.message.reply_text("Erro ao identificar o bot_id. Por favor, tente novamente.")
        return ConversationHandler.END

    # Carrega a configura√ß√£o do JSON e salva o novo texto do bot√£o
    config = load_config(bot_id)
    config['button_text'] = update.message.text.strip()
    save_config(config, bot_id)

    await update.message.reply_text("Texto do bot√£o inicial atualizado com sucesso!")
    context.user_data['conversacao_ativa'] = False  # Finaliza a opera√ß√£o
    return ConversationHandler.END


async def grupo_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await verificar_comando_ativo(update, context):  # Verifica se h√° outra opera√ß√£o ativa
        return ConversationHandler.END

    await reset_conversation(update, context)  # Limpa conversas anteriores
    chat_id = update.effective_chat.id
    bot_token = context.bot.token  # Obt√©m o token do bot atual

    # Verifica se o usu√°rio √© administrador do bot atual
    if not is_admin(chat_id):
        print("Usu√°rio n√£o autorizado para /grupo_id.")
        return ConversationHandler.END

    bot_id = context.user_data.get('bot_id') or context.bot_data.get('bot_id')
    if bot_id is None:
        await update.message.reply_text("Erro ao identificar o bot_id. Por favor, tente novamente.")
        print("Erro: bot_id n√£o identificado.")
        return ConversationHandler.END

    context.user_data['bot_id'] = bot_id
    context.user_data['conversacao_ativa'] = True  # Marca a conversa como ativa
    
    keyboard = [[InlineKeyboardButton("‚ùå CANCELAR", callback_data="cancelar")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text("üîó Por favor, forne√ßa o ID do grupo:", reply_markup=reply_markup)
    print("Solicita√ß√£o de ID do grupo enviada com sucesso.")
    return INPUT_GRUPO_ID



async def recebe_grupo_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("Recebendo ID do grupo...")  # Log para indicar que a fun√ß√£o foi chamada
    print(f"Estado de conversa√ß√£o ativa: {context.user_data.get('conversacao_ativa', False)}")  # Verifica se a conversa est√° ativa

    if not context.user_data.get('conversacao_ativa', False):
        print("Nenhuma opera√ß√£o ativa para receber o ID.")  # Log para indicar que n√£o h√° opera√ß√£o ativa
        return ConversationHandler.END  # Finaliza a conversa se n√£o houver opera√ß√£o ativa

    grupo_id = update.message.text.strip()
    bot_id = context.user_data.get('bot_id')  # Recupera o bot_id espec√≠fico do user_data

    # Verifica se o bot_id foi corretamente definido
    if bot_id is None:
        await update.message.reply_text("Erro ao identificar o bot_id. Por favor, tente novamente.")
        return ConversationHandler.END

    print(f"ID recebido do usu√°rio: {grupo_id}")  # Log do ID recebido
    
    # Verifica se o grupo_id √© um n√∫mero v√°lido
    if not grupo_id.lstrip('-').isdigit():
        await update.message.reply_text("‚ùóÔ∏è  Por favor, envie um ID de grupo v√°lido.")
        print(f"ID inv√°lido recebido: {grupo_id}")  # Log para indicar que o ID n√£o √© v√°lido
        return INPUT_GRUPO_ID

    try:
        # Tenta criar o link de convite do grupo
        print(f"Tentando criar link de convite para o grupo ID: {grupo_id}")
        group_invite_link = await context.bot.create_chat_invite_link(chat_id=grupo_id, member_limit=1, creates_join_request=False)
        # Salva o ID do grupo no arquivo JSON espec√≠fico do bot
        print(f"ID do grupo ser√° salvo ap√≥s confirma√ß√£o de sucesso: {grupo_id}")
        manager.update_bot_group(bot_id, grupo_id)
        cache['grupo'] = grupo_id
        await context.bot.send_message(chat_id=update.effective_chat.id, text=f"ùóüùóúùó°ùóû ùóóùóò ùóîùóñùóòùó¶ùó¶ùó¢ ùóîùó¢ ùóöùó•ùó®ùó£ùó¢: {group_invite_link.invite_link}")
        await update.message.reply_text("‚úÖ ID do grupo atualizado com sucesso!")
        
    except Exception as e:
        # Se ocorrer um erro na cria√ß√£o do link, informa o usu√°rio e n√£o salva o ID
        print(f"Erro ao criar link de convite: {e}")  # Log de erro para depura√ß√£o
        await context.bot.send_message(chat_id=update.effective_chat.id, text="‚ùå  N√£o foi poss√≠vel alterar o ID. Verifique se o bot est√° no grupo e possui permiss√µes de administrador.")

    context.user_data['conversacao_ativa'] = False
    print("Estado de 'conversacao_ativa' redefinido para False ap√≥s recebe_grupo_id.")
    return ConversationHandler.END

# Fun√ß√£o para remover o texto inicial
async def remover_texto(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("Comando /remover_texto iniciado.")

    # Verifica se j√° h√° um comando ativo
    if await verificar_comando_ativo(update, context):
        print("Encerrando /remover_texto devido a comando ativo.")
        return ConversationHandler.END

    # Marca o comando como ativo antes de iniciar a fun√ß√£o
    context.user_data['conversacao_ativa'] = True
    print("Comando /remover_texto marcado como ativo. Estado atual:", context.user_data.get('conversacao_ativa', False))

    chat_id = update.effective_chat.id
    bot_token = context.bot.token  # Obt√©m o token do bot atual

    # Verifica se o usu√°rio √© administrador do bot atual
    if not is_admin(chat_id):
        print("Usu√°rio n√£o autorizado para /remover_texto.")
        context.user_data['conversacao_ativa'] = False  # Desmarca o comando como ativo
        return ConversationHandler.END

    # Obt√©m o bot_id do user_data ou bot_data
    bot_id = context.user_data.get('bot_id') or context.bot_data.get('bot_id')
    if bot_id is None:
        await update.message.reply_text("Erro ao identificar o bot_id. Por favor, tente novamente.")
        print("Erro: bot_id n√£o identificado.")
        context.user_data['conversacao_ativa'] = False  # Desmarca o comando como ativo
        return ConversationHandler.END

    # Carrega as configura√ß√µes atuais com o bot_id
    config = load_config(bot_id)

    # Remove apenas o texto do in√≠cio da configura√ß√£o
    config['start_text'] = ''  # Limpa apenas o Texto 1
    save_config(config, bot_id)  # Salva a configura√ß√£o atualizada no arquivo espec√≠fico do bot

    await update.message.reply_text("üóëÔ∏è  Texto inicial removido com sucesso!")
    print("Texto inicial removido com sucesso.")
    
    # Desmarca o comando como ativo ap√≥s concluir a fun√ß√£o
    context.user_data['conversacao_ativa'] = False
    print("Comando /remover_texto conclu√≠do. Estado atual:", context.user_data.get('conversacao_ativa', False))
    return ConversationHandler.END



async def recuperacao_compra(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await verificar_comando_ativo(update, context):  # Verifica se h√° outra opera√ß√£o ativa
        return ConversationHandler.END

    await reset_conversation(update, context)  # Limpa conversas anteriores
    chat_id = update.effective_chat.id
    bot_token = context.bot.token  # Obt√©m o token do bot atual

    # Verifica se o usu√°rio √© administrador do bot atual
    if not is_admin(chat_id):
        print("Usu√°rio n√£o autorizado para /recuperacao_compra.")
        return ConversationHandler.END

    bot_id = context.user_data.get('bot_id') or context.bot_data.get('bot_id')
    if bot_id is None:
        await update.message.reply_text("Erro ao identificar o bot_id. Por favor, tente novamente.")
        print("Erro: bot_id n√£o identificado.")
        return ConversationHandler.END

    context.user_data['bot_id'] = bot_id
    context.user_data['conversacao_ativa'] = True  # Marca a conversa como ativa

    # Carrega as configura√ß√µes de recupera√ß√£o de compra
    context.user_data['configuracoes_recuperacao'] = load_recuperacao_config(bot_id)

    # Cria os bot√µes para configura√ß√£o das mensagens
    keyboard = [
        [InlineKeyboardButton(f"ùó†ùóòùó°ùó¶ùóîùóöùóòùó† {i+1}", callback_data=f"configurar_mensagem_{i}")]
        for i in range(3)
    ]
    keyboard.append([InlineKeyboardButton("‚ùå CANCELAR", callback_data='cancelar')])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üì¶ Configure mensagens para recupera√ß√£o de compra:", reply_markup=reply_markup)

    print("Solicita√ß√£o de configura√ß√£o de recupera√ß√£o de compra enviada com sucesso.")
    return SELECIONAR_MENSAGEM




async def selecionar_mensagem(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data.split('_')
    if data[-1] == 'cancelar':
        await query.edit_message_text("‚ùå A√ß√£o cancelada com sucesso!")
        context.user_data.clear()  # Limpa todos os dados armazenados
        context.user_data['conversacao_ativa'] = False  # Redefine o estado ativo
        print("Opera√ß√£o de recupera√ß√£o de compra cancelada.")
        return ConversationHandler.END

    try:
        index = int(data[-1])
        context.user_data['mensagem_index'] = index
        await query.message.reply_text("üé¨ Envie a m√≠dia para usar na recupera√ß√£o de compra:")
        return INPUT_MEDIA_RECUPERACAO
    except ValueError:
        await query.edit_message_text("‚ùå Ocorreu um erro ao processar sua solicita√ß√£o.")
        return ConversationHandler.END


async def recebe_midia_recuperacao(update: Update, context: ContextTypes.DEFAULT_TYPE):
    bot_id = cache['bot_id']
    configuracoes_recuperacao = json.loads(manager.get_bot_by_id(cache['bot_id'])[5])
    index = context.user_data['mensagem_index']

    try:
        if update.message.photo:
            configuracoes_recuperacao[index]["midia"] = str(update.message.photo[-1].file_id)
            configuracoes_recuperacao[index]["tipo"] = "photo"  # Armazena o tipo da m√≠dia
            print(f"[DEBUG] Foto salva com ID: {configuracoes_recuperacao[index]['midia']}")

        elif update.message.video:
            configuracoes_recuperacao[index]["midia"] = str(update.message.video.file_id)
            configuracoes_recuperacao[index]["tipo"] = "video"  # Armazena o tipo da m√≠dia
            print(f"[DEBUG] V√≠deo salvo com ID: {configuracoes_recuperacao[index]['midia']}")

        else:
            await update.message.reply_text("‚ùóÔ∏è Tipo de m√≠dia n√£o suportado. Por favor, envie uma foto ou v√≠deo.")
            return INPUT_MEDIA_RECUPERACAO
        context.user_data['configuracoes_recuperacao'] = configuracoes_recuperacao
        #save_recuperacao_config(configuracoes_recuperacao, bot_id)
        await update.message.reply_text("üìù Digite o texto para a recupera√ß√£o de compra:")

        return INPUT_TEXTO_RECUPERACAO
    except Exception as e:
        print(f"[ERROR] Erro ao salvar a m√≠dia: {e}")
        await update.message.reply_text("‚ùóÔ∏è Ocorreu um erro ao processar a m√≠dia. Tente novamente.")
        return INPUT_MEDIA_RECUPERACAO



async def remover_midia(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("Comando /remover_midia iniciado.")

    # Verifica se j√° h√° um comando ativo
    if await verificar_comando_ativo(update, context):
        print("Encerrando /remover_midia devido a comando ativo.")
        return ConversationHandler.END

    # Marca o comando como ativo antes de iniciar a fun√ß√£o
    context.user_data['conversacao_ativa'] = True
    print("Comando /remover_midia marcado como ativo. Estado atual:", context.user_data.get('conversacao_ativa', False))

    chat_id = update.effective_chat.id
    bot_token = context.bot.token  # Obt√©m o token do bot atual

    # Verifica se o usu√°rio √© administrador do bot atual
    if not is_admin(chat_id):
        print("Usu√°rio n√£o autorizado para /remover_midia.")
        context.user_data['conversacao_ativa'] = False  # Desmarca o comando como ativo
        return ConversationHandler.END

    # Obt√©m o bot_id do user_data ou bot_data
    bot_id = context.user_data.get('bot_id') or context.bot_data.get('bot_id')
    if bot_id is None:
        await update.message.reply_text("Erro ao identificar o bot_id. Por favor, tente novamente.")
        print("Erro: bot_id n√£o identificado.")
        context.user_data['conversacao_ativa'] = False  # Desmarca o comando como ativo
        return ConversationHandler.END

    # Carrega as configura√ß√µes espec√≠ficas do bot
    config = load_config(bot_id)

    # Remove a m√≠dia da configura√ß√£o
    config['start_media'] = None
    save_config(config, bot_id)  # Salva a configura√ß√£o atualizada no arquivo espec√≠fico do bot

    await update.message.reply_text("üóëÔ∏è A m√≠dia inicial foi exclu√≠da com sucesso!")
    print("M√≠dia inicial removida com sucesso.")
    
    # Desmarca o comando como ativo ap√≥s concluir a fun√ß√£o
    context.user_data['conversacao_ativa'] = False
    print("Comando /remover_midia conclu√≠do. Estado atual:", context.user_data.get('conversacao_ativa', False))
    return ConversationHandler.END




async def recebe_texto_recuperacao(update: Update, context: ContextTypes.DEFAULT_TYPE):
    bot_id = context.user_data.get('bot_id')
    configuracoes_recuperacao = context.user_data.get('configuracoes_recuperacao')

    index = context.user_data['mensagem_index']
    configuracoes_recuperacao[index]["texto"] = update.message.text
    context.user_data['configuracoes_recuperacao'] = configuracoes_recuperacao
    #save_recuperacao_config(configuracoes_recuperacao, bot_id)

    await update.message.reply_text("üí≤ Envie o valor que quer aplicar na recupera√ß√£o de compra:")
    return INPUT_DESCONTO_RECUPERACAO

async def recebe_desconto_recuperacao(update: Update, context: ContextTypes.DEFAULT_TYPE):
    bot_id = context.user_data.get('bot_id')
    configuracoes_recuperacao = context.user_data.get('configuracoes_recuperacao')

    index = context.user_data['mensagem_index']
    try:
        desconto = float(update.message.text.strip())
        if desconto < 3.99:
            raise ValueError("Valor inv√°lido.")
        configuracoes_recuperacao[index]["desconto"] = desconto
        context.user_data['configuracoes_recuperacao'] = configuracoes_recuperacao
        #save_recuperacao_config(configuracoes_recuperacao, bot_id)
        await update.message.reply_text("‚è±Ô∏è Defina o tempo de envio (em minutos) para este lembrete:")
        return INPUT_TEMPO_RECUPERACAO
    except ValueError:
        await update.message.reply_text("‚ùóÔ∏è Por favor, envie um valor v√°lido apartir de 4 reais.")
        return INPUT_DESCONTO_RECUPERACAO
    

async def recebe_tempo_recuperacao(update: Update, context: ContextTypes.DEFAULT_TYPE):
    bot_id = context.user_data.get('bot_id')
    configuracoes_recuperacao = context.user_data.get('configuracoes_recuperacao')

    index = context.user_data['mensagem_index']
    try:
        configuracoes_recuperacao[index]["tempo"] = int(update.message.text)
        save_recuperacao_config(configuracoes_recuperacao, bot_id)
        await update.message.reply_text("Configura√ß√£o de mensagem de recupera√ß√£o salva com sucesso!")
    except ValueError:
        await update.message.reply_text("‚ùóÔ∏è Por favor, envie um n√∫mero v√°lido para o tempo.")
        return INPUT_TEMPO_RECUPERACAO

    context.user_data['conversacao_ativa'] = False  # Finaliza a opera√ß√£o
    return ConversationHandler.END

# Fun√ß√£o para o comando /deletar_recuperacao
async def deletar_recuperacao(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("Comando /deletar_recuperacao iniciado.")

    if await verificar_comando_ativo(update, context):  # Verifica se h√° outra opera√ß√£o ativa
        print("Encerrando /deletar_recuperacao devido a comando ativo.")
        return ConversationHandler.END

    await reset_conversation(update, context)  # Limpa conversas anteriores
    chat_id = update.effective_chat.id
    bot_token = context.bot.token  # Obt√©m o token do bot atual

    # Verifica se o usu√°rio √© administrador do bot atual
    if not is_admin(chat_id):
        print("Usu√°rio n√£o autorizado para /deletar_recuperacao.")
        return ConversationHandler.END

    bot_id = context.user_data.get('bot_id') or context.bot_data.get('bot_id')
    if bot_id is None:
        await update.message.reply_text("Erro ao identificar o bot_id. Por favor, tente novamente.")
        print("Erro: bot_id n√£o identificado.")
        return ConversationHandler.END

    context.user_data['bot_id'] = bot_id
    context.user_data['conversacao_ativa'] = True  # Marca a conversa como ativa

    # Carrega as configura√ß√µes de recupera√ß√£o para o bot
    context.user_data['configuracoes_recuperacao'] = load_recuperacao_config(bot_id)

    # Cria o teclado para sele√ß√£o das mensagens de recupera√ß√£o
    keyboard = [
        [InlineKeyboardButton(f"ùó†ùóòùó°ùó¶ùóîùóöùóòùó† {i + 1}", callback_data=f"deletar_mensagem_{i}")]
        for i in range(3)
    ]
    keyboard.append([InlineKeyboardButton("‚ùå CANCELAR", callback_data='cancelar')])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üì¶ Selecione a mensagem de recupera√ß√£o que deseja deletar:", reply_markup=reply_markup)
    print("Teclado de sele√ß√£o enviado com sucesso.")

    return SELECIONAR_MENSAGEM_DELETAR




# Fun√ß√£o para processar a sele√ß√£o de mensagem e redefinir a configura√ß√£o
async def confirmar_deletar_recuperacao(update, context):
    query = update.callback_query
    await query.answer()

    bot_id = context.user_data.get('bot_id')
    configuracoes_recuperacao = context.user_data.get('configuracoes_recuperacao')

    data = query.data.split("_")
    if len(data) == 3 and data[1] == "mensagem":
        try:
            index = int(data[2])
            if index < len(configuracoes_recuperacao):
                configuracoes_recuperacao[index] = {"midia": None, "texto": "", "tempo": 0}
                save_recuperacao_config(configuracoes_recuperacao, bot_id)
                await query.edit_message_text(f"‚úÖ Mensagem {index + 1} de recupera√ß√£o redefinida com sucesso!")
            else:
                await query.message.reply_text("Erro ao redefinir a mensagem. √çndice inv√°lido.")
        except ValueError:
            await query.message.reply_text("Erro ao processar a mensagem de recupera√ß√£o. Tente novamente.")
    else:
        await query.message.reply_text("Erro ao processar a mensagem de recupera√ß√£o. Tente novamente.")

    context.user_data['conversacao_ativa'] = False  # Finaliza a opera√ß√£o
    return ConversationHandler.END



# Fun√ß√£o para o comando /excluir_plano
async def excluir_plano(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await verificar_comando_ativo(update, context):  # Verifica se h√° outra opera√ß√£o ativa
        return ConversationHandler.END

    await reset_conversation(update, context)  # Limpa conversas anteriores

    chat_id = update.effective_chat.id
    bot_token = context.bot.token  # Obt√©m o token do bot atual

    # Verifica se o usu√°rio √© administrador para o bot atual
    if not is_admin(chat_id):
        return ConversationHandler.END

    bot_id = context.user_data.get('bot_id') or context.bot_data.get('bot_id')
    if bot_id is None:
        await update.message.reply_text("Erro ao identificar o bot_id. Por favor, tente novamente.")
        return ConversationHandler.END

    context.user_data['bot_id'] = bot_id
    context.user_data['conversacao_ativa'] = True  # Marca a conversa como ativa

    planos = load_plans(bot_id)  # Carrega os planos associados ao bot_id

    if not planos:
        await update.message.reply_text("N√£o h√° planos dispon√≠veis para exclus√£o.")
        context.user_data['conversacao_ativa'] = False  # Finaliza a opera√ß√£o se n√£o houver planos
        return ConversationHandler.END

    keyboard = [
        [InlineKeyboardButton(plano['nome'], callback_data=f"delete_{plano_id}")]
        for plano_id, plano in planos.items()
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("Selecione o plano que deseja excluir:", reply_markup=reply_markup)

    return SELECT_PLAN_TO_DELETE




# Fun√ß√£o para processar a exclus√£o do plano selecionado
async def confirmar_exclusao_plano(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    bot_id = context.user_data.get('bot_id')
    planos = load_plans(bot_id)

    plano_id = query.data.replace("delete_", "")

    if plano_id in planos:
        del planos[plano_id]
        save_plans(planos, bot_id)
        await query.edit_message_text("‚úÖ Plano deletado com sucesso.")
    else:
        await query.edit_message_text("Erro: plano n√£o encontrado.")

    context.user_data['conversacao_ativa'] = False  # Finaliza a opera√ß√£o
    return ConversationHandler.END

# Fun√ß√£o para carregar a lista de IDs de usu√°rios
def load_user_ids(bot_id):
    bot = manager.get_bot_by_id(bot_id)
    return str(bot[8]).split(':')
    
    
def is_valid_url(url):
    try:
        # Adiciona 'https://' se n√£o houver esquema
        if not url.startswith(('http://', 'https://')):
            url = 'https://' + url

        result = urlparse(url)
        return all([result.scheme, result.netloc])
    except ValueError:
        return False
    
   ######################################## REMOVER USER DO GRUPO @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  






async def monitorar_entrada_e_revogar(bot_instance, grupo_id, user_id, invite_link, timeout=60):
    """
    Monitora se o usu√°rio entrou no grupo e revoga o link ap√≥s a entrada ou expira√ß√£o do timeout.
    """
    try:
        for _ in range(timeout):  # Verifica durante o tempo especificado (timeout segundos)
            membro = await bot_instance.get_chat_member(chat_id=grupo_id, user_id=user_id)
            
            # Verifica se o usu√°rio j√° √© membro
            if membro.status in ['member', 'administrator', 'creator']:
                print(f"[INFO] Usu√°rio {user_id} entrou no grupo {grupo_id}. Revogando link...")
                await bot_instance.revoke_chat_invite_link(chat_id=grupo_id, invite_link=invite_link)
                return
            
            # Espera 1 segundo antes da pr√≥xima verifica√ß√£o
            await asyncio.sleep(1)

        # Se o tempo acabar e o usu√°rio n√£o entrar, revoga o link
        print(f"[INFO] Tempo de entrada esgotado para o usu√°rio {user_id}. Revogando link...")
        await bot_instance.revoke_chat_invite_link(chat_id=grupo_id, invite_link=invite_link)

    except Exception as e:
        print(f"[ERRO] Erro ao monitorar entrada ou revogar link: {e}")






def adicionar_usuario_expiracao(bot_id, user_id, grupo_id, duracao):
    """
    Registra o usu√°rio no sistema de expira√ß√£o com datas completas (YYYY-MM-DD HH:MM:SS).
    """
    filename = f"bot{bot_id}_expiracao_user.json"

    # Calcula a data de expira√ß√£o
    data_atual = datetime.now()
    data_expiracao = data_atual + timedelta(days=duracao)

    # Formata as datas no padr√£o completo
    data_atual_formatada = data_atual.strftime("%Y-%m-%d %H:%M:%S")
    data_expiracao_formatada = data_expiracao.strftime("%Y-%m-%d %H:%M:%S")

    # Carrega os dados existentes ou cria um novo
    try:
        with open(filename, 'r') as file:
            expiracao_data = json.load(file)
    except FileNotFoundError:
        expiracao_data = {}

    # Adiciona o novo usu√°rio
    expiracao_data[str(user_id)] = {
        "grupo_id": str(cache['grupo']),
        "data_entrada": data_atual_formatada,
        "data_expiracao": data_expiracao_formatada
    }

    # Salva o arquivo atualizado
    with open(filename, 'w') as file:
        json.dump(expiracao_data, file, indent=4)
    
    
async def verificar_usuarios_expirados(bot_id, bot_instance):
    filename = f'bot{bot_id}_expiracao_user.json'
    try:
        # Carrega os dados do arquivo
        with open(filename, 'r') as file:
            expiracao_data = json.load(file)
    except FileNotFoundError:
        print("Nenhum arquivo de expira√ß√£o encontrado.")
        return

    # Obt√©m a data atual
    agora = datetime.now()

    usuarios_removidos = []
    for user_id, info in expiracao_data.items():
        data_expiracao = datetime.fromisoformat(info["data_expiracao"])
        if agora >= data_expiracao:
            grupo_id = info["grupo_id"]

            try:
                # Remove o usu√°rio do grupo
                await bot_instance.ban_chat_member(chat_id=grupo_id, user_id=user_id)
                print(f"Usu√°rio {user_id} removido do grupo {grupo_id}.")
                
                # Desbane o usu√°rio imediatamente
                await bot_instance.unban_chat_member(chat_id=grupo_id, user_id=user_id)
                print(f"Usu√°rio {user_id} desbanido do grupo {grupo_id}.")

                # Envia mensagem ao usu√°rio
                await bot_instance.send_message(
                    chat_id=user_id,
                    text=f"‚è≥ Seu plano expirou. Voc√™ foi removido do grupo {grupo_id}. Para renovar, entre em contato conosco!"
                )
                usuarios_removidos.append(user_id)
            except Exception as e:
                print(f"Erro ao remover/desbanir usu√°rio {user_id}: {e}")

    # Remove os usu√°rios expirados do arquivo
    for user_id in usuarios_removidos:
        del expiracao_data[user_id]

    # Atualiza o arquivo
    with open(filename, 'w') as file:
        json.dump(expiracao_data, file)


async def agendar_verificacao_expiracao(bot_id, bot_instance):
    while True:
        print("Verificando usu√°rios expirados...")
        await verificar_usuarios_expirados(bot_id, bot_instance)
        await asyncio.sleep(30)  # Aguarda 1 hora antes de verificar novamente 
    
def calcular_duracao(duracao_str):
    """
    Converte a dura√ß√£o de um plano em dias.
    Exemplo: "10 dias" -> 10, "1 m√™s" -> 30.
    """
    unidades = {
        "dia": 1,
        "dias": 1,
        "semana": 7,
        "semanas": 7,
        "m√™s": 30,
        "meses": 30,
        "ano": 365,
        "anos": 365
    }

    partes = duracao_str.split()
    if len(partes) != 2:
        raise ValueError(f"Formato inv√°lido para dura√ß√£o: {duracao_str}")

    quantidade, unidade = int(partes[0]), partes[1].lower()
    if unidade not in unidades:
        raise ValueError(f"Unidade desconhecida: {unidade}")

    return quantidade * unidades[unidade]


######################################## REMOVER USER DO GRUPO @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  


async def disparo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("Comando /disparo iniciado.")

    # Verifica se j√° h√° um comando ativo
    if await verificar_comando_ativo(update, context):
        print("Encerrando /disparo devido a comando ativo.")
        return ConversationHandler.END

    try:
        # Marca o comando como ativo antes de resetar
        context.user_data['conversacao_ativa'] = True
        print("Comando /disparo marcado como ativo. Estado atual:", context.user_data['conversacao_ativa'])

        # Reseta qualquer conversa anterior, mas mant√©m o estado ativo
        await reset_conversation(update, context)

        # Obt√©m o token do bot atual
        bot_token = context.bot.token

        # Verifica se o usu√°rio √© administrador do bot atual
        chat_id = update.effective_user.id
        if not is_admin(chat_id):
            print("Usu√°rio n√£o autorizado para /disparo.")
            await update.message.reply_text("‚ö†Ô∏è Voc√™ n√£o tem permiss√£o para executar este comando.")
            context.user_data['conversacao_ativa'] = False  # Desmarca o comando como ativo
            return ConversationHandler.END

        # Solicita a m√≠dia ao usu√°rio
        await update.message.reply_text("Envie a m√≠dia (imagem ou v√≠deo) para o disparo.")
        print("Solicita√ß√£o de m√≠dia enviada ao usu√°rio.")
        return MEDIA
    except Exception as e:
        print(f"Erro ao executar /disparo: {e}")
        context.user_data['conversacao_ativa'] = False  # Desmarca o comando como ativo em caso de erro
        return ConversationHandler.END

# Recebe a m√≠dia do disparo
async def receber_midia(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("Recebendo m√≠dia para disparo.")

    # N√£o verifica comando ativo aqui, pois faz parte do fluxo iniciado
    try:
        # Verifica o tipo de m√≠dia enviada
        if update.message.photo:
            context.user_data['media_type'] = 'photo'
            context.user_data['media'] = update.message.photo[-1].file_id
        elif update.message.video:
            context.user_data['media_type'] = 'video'
            context.user_data['media'] = update.message.video.file_id
        else:
            await update.message.reply_text("Envie apenas uma imagem ou um v√≠deo.")
            return MEDIA

        # Solicita o texto para o disparo
        await update.message.reply_text("Agora, envie o texto da mensagem de disparo.")
        return TEXT
    except Exception as e:
        print(f"Erro ao processar m√≠dia: {e}")
        return ConversationHandler.END



# Recebe o texto do disparo
async def receber_texto(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("Recebendo texto para disparo.")

    try:
        # Armazena o texto no contexto do usu√°rio
        context.user_data['text'] = update.message.text
        await update.message.reply_text("Envie o link que deseja incluir no bot√£o.")
        return LINK
    except Exception as e:
        print(f"Erro ao processar texto: {e}")
        return ConversationHandler.END

# Recebe o link do bot√£o e exibe a confirma√ß√£o
from urllib.parse import urlparse

# Recebe o link do bot√£o e exibe a confirma√ß√£o
# Recebe o link do bot√£o e exibe a confirma√ß√£o
async def receber_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("Recebendo link para disparo.")

    try:
        # Armazena o link enviado pelo usu√°rio
        user_link = update.message.text.strip()

        # Verifica se o link √© v√°lido
        if not (user_link.lower().startswith("http://") or user_link.lower().startswith("https://") or user_link.lower().startswith("t.me/")):
            await update.message.reply_text(
                "‚ö†Ô∏è O link enviado √© inv√°lido. O link deve come√ßar com 'http://', 'https://', ou 't.me/'."
            )
            return LINK  # Mant√©m o estado para o usu√°rio tentar novamente

        # Se o link come√ßa com "t.me", adiciona o esquema "https://"
        if user_link.lower().startswith("t.me/"):
            user_link = f"https://{user_link}"

        # Armazena o link v√°lido no contexto
        context.user_data['link'] = user_link

        # Configura o teclado para confirma√ß√£o
        keyboard = [
            [
                InlineKeyboardButton("ENVIAR", callback_data='send'),
                InlineKeyboardButton("CANCELAR", callback_data='cancel')
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("PRONTO PARA EFETUAR SEU DISPARO?", reply_markup=reply_markup)
        return CONFIRM
    except Exception as e:
        print(f"Erro ao processar link: {e}")
        return ConversationHandler.END

# Confirma e envia a mensagem para todos os usu√°rios ou cancela o disparo
async def confirmacao_disparo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("Confirmando disparo.")
    bot_instance = bot_application.bot
    bot_id = context.bot_data.get('bot_id', 1)
    user_ids = load_user_ids(bot_id)
    admin_id = cache['owner']
    try:
        query = update.callback_query
        await query.answer()

        if query.data == 'send':
            print("Disparo confirmado pelo usu√°rio.")

            # Envia a mensagem de disparo para todos os usu√°rios cadastrados
            for user_id in user_ids:
                try:
                    check = await verificar_chat_existe(int(user_id))
                    if user_id != '' and check:
                        keyboard = [[InlineKeyboardButton("Clique aqui", url=context.user_data['link'])]]
                        reply_markup = InlineKeyboardMarkup(keyboard)

                        if context.user_data['media_type'] == 'photo':
                            await context.bot.send_photo(
                                chat_id=user_id,
                                photo=context.user_data['media'],
                                caption=context.user_data['text'],
                                reply_markup=reply_markup
                            )
                        elif context.user_data['media_type'] == 'video':
                            await context.bot.send_video(
                                chat_id=user_id,
                                video=context.user_data['media'],
                                caption=context.user_data['text'],
                                reply_markup=reply_markup
                            )
                except:
                    print(f"Erro ao disparar para o chat {user_id}")
            await bot_instance.send_message(
                        chat_id=admin_id,
                        text=f"‚úÖ Mensagem de disparo enviada para todos os usu√°rios")
        else:
            print("Disparo cancelado pelo usu√°rio.")
            await bot_instance.send_message(
                chat_id=admin_id,
                text=f"‚ùå Disparo cancelado.")

            # Limpa os dados do usu√°rio
            context.user_data.clear()
    except Exception as e:
        print(f"Erro ao processar confirma√ß√£o de disparo: {e}")
    finally:
        context.user_data['conversacao_ativa'] = False
        return ConversationHandler.END


def create_cancel_button():
    return InlineKeyboardButton("‚ùå  ùóñùóîùó°ùóñùóòùóüùóîùó•", callback_data='cancelar')

# Handler para /gateway
async def gateway(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("Comando /gateway iniciado.")

    if await verificar_comando_ativo(update, context):
        print("Encerrando /gateway devido a comando ativo.")
        return ConversationHandler.END

    await reset_conversation(update, context)
    try:
        chat_id = update.effective_chat.id
        context.user_data['chat_id'] = chat_id
        bot_token = context.bot.token

        if not is_admin(chat_id):
            print("Usu√°rio n√£o autorizado para /gateway.")
            return ConversationHandler.END

        bot_id = context.bot_data.get('bot_id', '1')  # Define um valor padr√£o
        context.user_data['bot_id'] = bot_id

        context.user_data['conversacao_ativa'] = True
        keyboard = [[InlineKeyboardButton("üîë Pushpay", callback_data='PP')],
                    [InlineKeyboardButton("üîë Mercado Pago", callback_data='MP')],
                    [InlineKeyboardButton("‚ùå CANCELAR", callback_data='cancelar')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text("üîë Escolha uma gateway para configurar a conta:", reply_markup=reply_markup)
        print("Solicita√ß√£o de token enviada.")
        return INPUT_TOKEN

    except Exception as e:
        print(f"Erro ao executar /gateway: {e}")
        await update.message.reply_text("Ocorreu um erro. Tente novamente mais tarde.")
        context.user_data['conversacao_ativa'] = False
        return ConversationHandler.END

async def recebe_token(update: Update, context: CallbackContext):
    query = update.callback_query
    
    await query.answer()
    print(query)
    if query.data.lower() == 'cancelar':
        print('cancelei')
        # Limpa o estado do usu√°rio
        print("macaco cancelou")
        
        context.user_data['conversacao_ativa'] = False  # Garante que `conversacao_ativa` seja redefinido
        print("Todos os estados do usu√°rio foram redefinidos pelo comando /cancel.")

        # Envia uma mensagem de confirma√ß√£o ao usu√°rio
        try:
            bot_instance = bot_application.bot
            chat_id = update.effective_chat.id
            context.user_data.clear()
            await bot_instance.send_message(chat_id=chat_id, text="‚ùå Todas as opera√ß√µes foram canceladas com sucesso.")
            return ConversationHandler.END
        except Exception as e:
            print(f'erro ao cancelar: {e}')
                            # Caso n√£o haja m√≠dia, apenas envia a mensagem de texto
            
        if update.callback_query:
            await update.callback_query.message.reply_text("‚ùå Todas as opera√ß√µes foram canceladas com sucesso.")
            await update.callback_query.answer()
        else:
            await update.message.reply_text("‚ùå Todas as opera√ß√µes foram canceladas com sucesso.")

        # Finaliza qualquer estado ativo no ConversationHandler
        context.user_data['']
        context.user_data.clear()
        return ConversationHandler.END
    
    cache['token_type'] = query.data
    
    
    if cache['token_type'] == 'PP':
        await context.bot.send_message(chat_id=update.effective_chat.id, text='Envie o token de sua conta PushPay')
        return TOKEN_RETRY
    elif cache['token_type'] == 'MP':
        code_verifier = payment.generate_code_verifier()
        key = payment.generate_code_challenge(code_verifier)
        try:
            response = requests.get(f'{IP_DA_API}/key?key={code_verifier}&bot_id={cache['bot_id']}')
            if response.status_code == 200:
                keyboard = [
                [
                    InlineKeyboardButton(
                        "AUTORIZAR MERCADO PAGO",
                        url=f'https://auth.mercadopago.com/authorization?client_id=4160833868783446&response_type=code&platform_id=mp&state={cache["bot_id"]}&redirect_url={URL_REDIRECT}&code_challenge={key}&code_challenge_method=S256'
                    )
                ]
            ]
            
                # Cria√ß√£o do objeto InlineKeyboardMarkup
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                # Envio da mensagem com o bot√£o
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text="Clique no bot√£o abaixo para autorizar o Mercado Pago:",
                    reply_markup=reply_markup
                )
            else:
                await context.bot.send_message(chat_id=update.effective_chat.id, text=f'‚ùå Falha ao gerar chaves de criptografia do token')
        except Exception as e:
            print(e)
            await context.bot.send_message(chat_id=update.effective_chat.id, text=f'‚ùå Falha ao enviar chaves de criptografia do token')
            
        finally:
            context.user_data['conversacao_ativa'] = False

    

async def repete_token(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        token = update.message.text.strip()
        bot_id = context.bot_data.get('bot_id', '1')  # Usa bot_data com valor padr√£o
        if payment.verificar_push(token):
            payment_object = {'token':token, 'type':'PP'}
            manager.update_bot_payment(bot_id, payment_object)
            cache['gate_token'] = token
            await update.message.reply_text(f"‚úÖ Token configurado para o bot {bot_id} com sucesso!")
        else:
            await update.message.reply_text(f"‚ùå Token invalido, envie um token existente!")
            return TOKEN_RETRY
    except Exception as e:
        print(f"Erro ao salvar token: {e}")
    finally:
        # Redefine o estado para permitir novos comandos
        context.user_data['conversacao_ativa'] = False
        print("Fluxo de configura√ß√£o de token conclu√≠do. Estado redefinido.")
        return ConversationHandler.END




async def verificar_comando_ativo(update, context):
    estado_ativo = context.user_data.get('conversacao_ativa', False)
    print(f"Verificando comando ativo. Estado atual: {estado_ativo}")

    if estado_ativo:
        mensagem = "Voc√™ j√° est√° em uma opera√ß√£o. Digite /cancel para cancelar."
        if update.callback_query:
            await update.callback_query.message.reply_text(mensagem)
            await update.callback_query.answer()
        else:
            await update.message.reply_text(mensagem)
        print("Comando bloqueado devido a opera√ß√£o ativa.")
        return True  # Bloqueia o comando atual

    print("Nenhuma opera√ß√£o ativa encontrada. Continuando...")
    return False

# Fun√ß√£o para resetar a conversa e definir 'conversacao_ativa' como False
async def reset_conversation(update, context):
    print("Resetando conversa e mantendo estado de comando ativo.")
    # Armazena o valor atual de conversacao_ativa
    conversacao_ativa = context.user_data.get('conversacao_ativa', False)
    # Limpa todos os outros dados, mas mant√©m conversacao_ativa
    context.user_data.clear()
    context.user_data['conversacao_ativa'] = conversacao_ativa
    print(f"Estado de conversacao_ativa ap√≥s reset: {context.user_data['conversacao_ativa']}")


async def comandos(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("Comando /comandos iniciado.")

    # Verifica se j√° h√° um comando ativo
    if await verificar_comando_ativo(update, context):
        print("Encerrando /comandos devido a comando ativo.")
        return

    # Marca o comando como ativo antes de iniciar a fun√ß√£o
    context.user_data['conversacao_ativa'] = True
    print("Comando /comandos marcado como ativo. Estado atual:", context.user_data.get('conversacao_ativa', False))

    try:
        # Limpa conversas anteriores
        await reset_conversation(update, context)
        
        chat_id = update.effective_chat.id
        bot_token = context.bot.token  # Obt√©m o token do bot atual

        # Verifica se o usu√°rio √© administrador para o bot atual
        if not is_admin(chat_id):
            print("Usu√°rio n√£o autorizado para /comandos.")
            return

        # Texto com a lista de comandos
        comandos_texto = (
            "üëã <b>Seja bem-vindo, Administrador!</b>\n\n"
            "‚öôÔ∏è Estou aqui para ajudar voc√™ a gerenciar seu bot de forma eficiente! Aqui est√£o os comandos dispon√≠veis:\n\n"
            "<b>1. /criar_plano -</b> üÜï Inicie o processo para criar um novo plano de assinatura.\n\n"
            "<b>2. /excluir_plano -</b> üóëÔ∏è Exiba os planos atuais e permita a exclus√£o de um plano selecionado.\n\n"
            "<b>3. /gateway -</b> üîê Configure o token da conta Pushinpay para integra√ß√µes de pagamento.\n\n"
            "<b>4. /texto -</b> üìù Defina o texto de boas-vindas inicial do bot.\n\n"
            "<b>5. /texto2 -</b> üìù Adicione um segundo texto de boas-vindas.\n\n"
            "<b>6. /midia_inicial -</b> üñºÔ∏è Permita o envio de m√≠dia que ser√° exibida no in√≠cio.\n\n"
            "<b>7. /remover_midia -</b> ‚ùå Remova a m√≠dia inicial do bot.\n\n"
            "<b>8. /remover_texto -</b> ‚ùå Remova o texto inicial do bot.\n\n"
            "<b>9. /upsell -</b> üí∏ Configure uma mensagem de upsell que ser√° exibida antes da confirma√ß√£o de pagamento.\n\n"
            "<b>10. /grupo_id -</b> üîó Permita trocar o ID do grupo VIP e gerar link de acesso.\n\n"
            "<b>11. /recuperacao_compra -</b> üîÑ Gerencie mensagens de remarketing para recupera√ß√£o de compra.\n\n"
            "<b>12. /start -</b> üèÅ Exiba a mensagem inicial para o usu√°rio.\n\n"
            "<b>13. /comandos -</b> üìã Mostre esta lista de comandos.\n\n"
            "<b>14. /cancel -</b> ‚õî Cancele a opera√ß√£o atual e retorne ao menu principal.\n\n"
            "<b>15. /remover_upsell -</b> üóëÔ∏è Exclua a mensagem de upsell configurada.\n\n"
            "<b>16. /deletar_recuperacao -</b> üóëÔ∏è Exclua mensagens de recupera√ß√£o de compra configuradas.\n\n"
            "<b>17. /texto_botao -</b> üîò Configure o texto do bot√£o inicial exibido aos usu√°rios.\n\n"
            "<b>18. /disparo -</b> üöÄ Configure e envie disparos personalizados para todos os usu√°rios.\n\n"
            "üíº Aproveite ao m√°ximo esses comandos para elevar a qualidade do seu bot e surpreender seus clientes! üöÄ"
        )
        
        # Envia a lista de comandos ao administrador
        await update.message.reply_text(comandos_texto, parse_mode='HTML')
        print("Lista de comandos enviada com sucesso.")
    except Exception as e:
        print(f"Erro ao executar /comandos: {e}")
    finally:
        # Desmarca o comando como ativo ap√≥s finalizar
        context.user_data['conversacao_ativa'] = False
        print("Comando /comandos conclu√≠do. Estado atual:", context.user_data.get('conversacao_ativa', False))



def get_bot(self, bot_id):
    # Aqui voc√™ implementaria a l√≥gica para retornar o bot certo baseado no bot_id
    return self.bots.get(bot_id)  # Exemplo, onde 'self.bots' cont√©m as inst√¢ncias dos bots



def load_upsell(bot_id):
    bot = manager.get_bot_by_id(bot_id)
    if bot:
        config = json.loads(bot[9])
        return config
    else:
        return False


# Fun√ß√£o para salvar o upsell no arquivo JSON espec√≠fico do bot
def save_upsell(content, bot_id):
    manager.update_bot_upsell(bot_id, content)

# Vari√°vel global para armazenar o upsell
upsell_message = {}

async def upsell(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await verificar_comando_ativo(update, context):  # Verifica se h√° outra opera√ß√£o ativa
        return ConversationHandler.END

    await reset_conversation(update, context)  # Limpa conversas anteriores
    chat_id = update.effective_chat.id
    bot_token = context.bot.token  # Obt√©m o token do bot atual

    # Verifica se o usu√°rio √© administrador do bot atual
    if not is_admin(chat_id):
        print("Usu√°rio n√£o autorizado para /upsell.")
        return ConversationHandler.END

    bot_id = context.user_data.get('bot_id') or context.bot_data.get('bot_id')
    if bot_id is None:
        await update.message.reply_text("Erro ao identificar o bot_id. Por favor, tente novamente.")
        print("Erro: bot_id n√£o identificado.")
        return ConversationHandler.END

    context.user_data['bot_id'] = bot_id
    
    context.user_data['conversacao_ativa'] = True  # Marca a conversa como ativa

    keyboard = [[InlineKeyboardButton("‚ùå CANCELAR", callback_data='cancelar')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "üì≤ Envie a mensagem de upsell desejada, com foto ou v√≠deo.",
        reply_markup=reply_markup
    )
    print("Solicita√ß√£o de upsell enviada com sucesso.")
    return INPUT_UPSELL_CONTENT


async def recebe_midia_upsell(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("Fun√ß√£o recebe_midia_upsell chamada.")
    print(f"Mensagem recebida: {update.message.text if update.message.text else 'Sem texto'}")

    # Verifica se o usu√°rio deseja cancelar
    if update.message.text and update.message.text.strip().lower() == "/cancel":
        print("Usu√°rio solicitou /cancel. Encerrando opera√ß√£o.")
        return await cancel(update, context)  # Retorna diretamente o fluxo do cancel

    # Verifica se o usu√°rio est√° tentando enviar outro comando
    if update.message.text and update.message.text.strip().startswith("/") and update.message.text.strip().lower() != "/cancel":
        print(f"Comando detectado durante a opera√ß√£o ativa: {update.message.text.strip()}")
        await update.message.reply_text("Voc√™ j√° est√° em uma opera√ß√£o. Digite /cancel para cancelar.")
        return  # Bloqueia a execu√ß√£o do pr√≥ximo passo

    # Continua com o processamento normal do upsell
    bot_id = context.user_data.get('bot_id')
    print(f"Bot ID obtido do contexto: {bot_id}")

    if bot_id is None:
        print("Erro: bot_id n√£o encontrado no contexto.")
        await update.message.reply_text("Erro ao identificar o bot_id. Por favor, tente novamente.")
        return ConversationHandler.END

    upsell_data = {"text": "", "media": None, "type": None}
    print("Estrutura upsell_data inicializada.")

    if update.message.photo:
        upsell_data["media"] = update.message.photo[-1].file_id
        upsell_data["type"] = "photo"
        print(f"Foto detectada. File ID: {upsell_data['media']}")
    elif update.message.video:
        upsell_data["media"] = update.message.video.file_id
        upsell_data["type"] = "video"
        print(f"V√≠deo detectado. File ID: {upsell_data['media']}")
    else:
        print("Nenhuma m√≠dia detectada na mensagem.")

    upsell_text = update.message.caption.strip() if update.message.caption else "Confira essa oferta especial!"
    upsell_data["text"] = upsell_text
    print(f"Texto da oferta capturado: {upsell_text}")

    print("Salvando dados do upsell...")
    save_upsell(upsell_data, bot_id)
    print(f"Dados do upsell salvos: {upsell_data}")

    await update.message.reply_text("Agora envie o link do bot√£o de upsell:")
    print("Mensagem enviada ao usu√°rio solicitando o link do bot√£o.")

    return INPUT_UPSELL_LINK



async def recebe_link_upsell(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text and update.message.text.strip().lower() == "/cancel":
        return await cancel(update, context)

    try:
        bot_id = context.user_data.get('bot_id')
        upsell_data = load_upsell(bot_id)

        upsell_link = update.message.text.strip()

        # Valida√ß√£o do link
        if not (upsell_link.lower().startswith("http://") or upsell_link.lower().startswith("https://") or upsell_link.lower().startswith("t.me/")):
            await update.message.reply_text(
                "‚ö†Ô∏è O link enviado √© inv√°lido. O link deve come√ßar com 'http://', 'https://', ou 't.me/'."
            )
            return INPUT_UPSELL_LINK  # Mant√©m o estado para o usu√°rio tentar novamente

        # Se o link come√ßa com "t.me", adiciona o esquema "https://"
        if upsell_link.lower().startswith("t.me/"):
            upsell_link = f"https://{upsell_link}"


        # Salva o link validado
        upsell_data["link"] = upsell_link
        save_upsell(upsell_data, bot_id)

        await update.message.reply_text("‚úÖ Link de upsell salvo com sucesso!")

        context.user_data['conversacao_ativa'] = False  # Finaliza a opera√ß√£o
        return ConversationHandler.END

    except Exception as e:
        print(f"Erro ao processar link de upsell: {e}")
        await update.message.reply_text("‚ùå Ocorreu um erro ao salvar o link de upsell.")
        return ConversationHandler.END

# Fun√ß√£o para salvar as configura√ß√µes de recupera√ß√£o no arquivo JSON
def save_recuperacao_config(configuracoes, bot_id):
    manager.update_bot_recovery(bot_id, configuracoes)


# Fun√ß√£o para carregar o dicion√°rio de planos espec√≠ficos para cada bot
def load_plans(bot_id):
    bot = manager.get_bot_by_id(bot_id)
    return json.loads(bot[6])

# Fun√ß√£o para salvar o dicion√°rio de planos espec√≠ficos para cada bot
def save_plans(plans, bot_id):
    manager.update_bot_plans(bot_id, plans)

# Definindo estados para os ConversationHandlers
INPUT_TEXT = 0
INPUT_TEXT2 = 1
INPUT_MEDIA = 2

async def enviar_lista_planos(context: ContextTypes.DEFAULT_TYPE, chat_id: int):
    bot_id = context.user_data.get('bot_id') or context.bot_data.get('bot_id')
    
    # Verifica e define o bot_id se ainda n√£o estiver configurado
    if bot_id is None:
        bot_id = 1  # Ajuste o valor padr√£o conforme necess√°rio
        context.user_data['bot_id'] = bot_id
        context.bot_data['bot_id'] = bot_id
    
    # Carregar os planos espec√≠ficos para o bot_id
    planos = load_plans(bot_id)
    print(f"[DEBUG - enviar_lista_planos] Planos carregados: {planos}")

    # Verifica se h√° planos dispon√≠veis para exibi√ß√£o
    if planos:
        keyboard = [
            [InlineKeyboardButton(f"{plano['nome']} - R$ {plano['valor']}", callback_data=plano_id)]
            for plano_id, plano in planos.items()
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await context.bot.send_message(chat_id=chat_id, text="Escolha uma oferta abaixo:", reply_markup=reply_markup)
    else:
        await context.bot.send_message(chat_id=chat_id, text="No momento, n√£o temos planos dispon√≠veis.")


async def handle_commands(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id

    # Recupera o token do bot atual
    token_do_bot = context.bot_data.get('token')
    if not token_do_bot:
        await update.message.reply_text("Erro: N√£o foi poss√≠vel identificar o token do bot em uso.")
        return

    # Ignora o comando /start
    if update.message.text == '/start':
        return  # N√£o faz nada se for o comando /start

    # Adicione o comando de lista de planos apenas se n√£o estiver em uma opera√ß√£o ativa
    if context.user_data.get('conversacao_ativa', False):
        return  # N√£o processa mais comandos se estiver em uma opera√ß√£o ativa

    # Se o usu√°rio n√£o √© um administrador, envia a lista de planos
    if not is_admin(chat_id):
        await enviar_lista_planos(context, chat_id)  # Envie a lista de planos apenas para usu√°rios comuns

        
async def handle_all_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id

    # Recupera o token do bot atual
    token_do_bot = context.bot_data.get('token')
    if not token_do_bot:
        await update.message.reply_text("Erro: N√£o foi poss√≠vel identificar o token do bot em uso.")
        return

    # Verifica se a conversa est√° ativa
    if context.user_data.get('conversacao_ativa', False):
        return

    # Ignora comandos
    if update.message.text.startswith('/'):
        return  # N√£o faz nada se for um comando

    # Se o usu√°rio n√£o √© um administrador, envia a lista de planos
    if not is_admin(chat_id):
        await enviar_lista_planos(context, chat_id)  # Envie a lista de planos apenas para usu√°rios comuns











        
def escape_markdown_v2(text):
    # Fun√ß√£o para escapar caracteres especiais no MarkdownV2
    return re.sub(r'([_\*\[\]\(\)~`>#+\-=|{}\.!])', r'\\\1', text)

# Handler para o comando /remover_upsell
async def remover_upsell(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("Comando /remover_upsell iniciado.")

    # Verifica se j√° h√° um comando ativo
    if await verificar_comando_ativo(update, context):
        print("Encerrando /remover_upsell devido a comando ativo.")
        return ConversationHandler.END

    # Marca o comando como ativo antes de iniciar a fun√ß√£o
    context.user_data['conversacao_ativa'] = True
    print("Comando /remover_upsell marcado como ativo. Estado atual:", context.user_data.get('conversacao_ativa', False))

    try:
        chat_id = update.effective_chat.id
        bot_token = context.bot.token  # Obt√©m o token do bot atual

        # Verifica se o usu√°rio √© administrador do bot atual
        if not is_admin(chat_id):
            print("Usu√°rio n√£o autorizado para /remover_upsell.")
            context.user_data['conversacao_ativa'] = False  # Desmarca o comando como ativo
            return ConversationHandler.END

        # Obt√©m o bot_id do user_data ou bot_data
        bot_id = context.user_data.get('bot_id') or context.bot_data.get('bot_id')
        if bot_id is None:
            await update.message.reply_text("Erro ao identificar o bot_id. Por favor, tente novamente.")
            print("Erro: bot_id n√£o identificado.")
            context.user_data['conversacao_ativa'] = False  # Desmarca o comando como ativo
            return ConversationHandler.END

        # Define o upsell como vazio
        empty_upsell = {"text": "", "media": None, "type": None}
        save_upsell(empty_upsell, bot_id)  # Salva o upsell vazio para o bot espec√≠fico

        # Carrega novamente para verificar se o conte√∫do foi atualizado
        upsell_data = load_upsell(bot_id)
        if upsell_data == empty_upsell:
            await update.message.reply_text("üóëÔ∏è Mensagem de upsell exclu√≠da com sucesso!")
            print("Upsell removido com sucesso.")
        else:
            await update.message.reply_text("Erro ao remover o upsell. Tente novamente.")
            print("Erro ao remover o upsell.")
    except Exception as e:
        print(f"Erro ao executar /remover_upsell: {e}")
    finally:
        # Desmarca o comando como ativo ap√≥s concluir a fun√ß√£o
        context.user_data['conversacao_ativa'] = False
        print("Comando /remover_upsell conclu√≠do. Estado atual:", context.user_data.get('conversacao_ativa', False))

    return ConversationHandler.END




async def criar_plano(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await verificar_comando_ativo(update, context):  # Verifica se h√° outra opera√ß√£o ativa
        return ConversationHandler.END

    await reset_conversation(update, context)  # Limpa conversas anteriores

    chat_id = update.effective_chat.id
    bot_token = context.bot.token  # Obt√©m o token do bot atual

    # Verifica se o usu√°rio √© administrador para o bot atual
    if not is_admin(chat_id):
        return ConversationHandler.END

    bot_id = context.user_data.get('bot_id') or context.bot_data.get('bot_id')
    if bot_id is None:
        await update.message.reply_text("Erro ao identificar o bot_id. Por favor, tente novamente.")
        return ConversationHandler.END

    context.user_data['bot_id'] = bot_id
    context.user_data['conversacao_ativa'] = True  # Marca a conversa como ativa

    await update.message.reply_text(
        "üìù Qual ser√° o nome do plano?\n\n> Para cancelar a cria√ß√£o do plano, utilize o comando: /cancel",
        parse_mode='MarkdownV2'
    )
    
    return INPUT_PLAN_NAME


async def recebe_nome_plano(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['novo_plano'] = {'nome': update.message.text.strip()}
    
    # Envia a mensagem com instru√ß√µes para a dura√ß√£o do plano
    instrucoes = (
        "‚åõÔ∏è  Escolha a dura√ß√£o do plano: \n"
    )
    # Gera um bot√£o para cada plano dispon√≠vel
    keyboard = [
        [InlineKeyboardButton(f"ùóóùóúùóîùó•ùóúùó¢", callback_data='diario')],
        [InlineKeyboardButton(f"ùó¶ùóòùó†ùóîùó°ùóîùóü", callback_data='semanal')],
        [InlineKeyboardButton(f"ùó†ùóòùó°ùó¶ùóîùóü", callback_data='mensal')],
        [InlineKeyboardButton(f"ùóîùó°ùó®ùóîùóü", callback_data='anual')],
        [InlineKeyboardButton(f"ùó©ùóúùóßùóîùóüùóúùóñùóúùó¢", callback_data='vitalicio')]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    context.user_data['mensagem'] = await update.message.reply_text(instrucoes, parse_mode='MarkdownV2', reply_markup=reply_markup)
    
    return INPUT_PLAN_DURATION  # Retorna o estado para esperar a dura√ß√£o

async def recebe_duracao_plano(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    names = {
        'diario':'dias',
        'semanal':'semanas',
        'mensal':'meses',
        'anual':'anos'
    }

    chat_id = update.effective_chat.id
    context.user_data['novo_plano']['ciclo'] = query.data
    if query.data == 'vitalicio':
        await context.bot.send_message(chat_id=chat_id, text='üí∞ Defina o valor do plano:')
        context.user_data['novo_plano']['duracao'] = 'vital√≠cio'
        return INPUT_PLAN_VALUE
    await context.bot.send_message(chat_id=chat_id, text=f'Insira o numero de {names[query.data]} do plano:')
    return INPUT_PLAN_CUSTON

async def recebe_quantidade_plano(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        dias = int(update.message.text)
        dura = ''
        if int(dias) > 1:
            names = {
                'diario':'dias',
                'semanal':'semanas',
                'mensal':'meses',
                'anual':'anos',
                'vitalicio':''
            }
            dura = f'{dias} {names[context.user_data['novo_plano']['ciclo']]}'
        else:
            names = {
                'diario':'dia',
                'semanal':'semana',
                'mensal':'mes',
                'anual':'ano',
                'vitalicio':''
            }
            dura = f'{dias} {names[context.user_data['novo_plano']['ciclo']]}'
        
        context.user_data['novo_plano']['duracao'] = dura
        await update.message.reply_text('üí∞ Defina o valor do plano:')    
        return INPUT_PLAN_VALUE
    except ValueError:
        await update.message.reply_text("Por favor, digite um valor num√©rico v√°lido.")
        return INPUT_PLAN_CUSTON

async def recebe_valor_plano(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        valor = float(update.message.text.replace(',', '.'))
        if valor < 3.99:
            await update.message.reply_text("Por favor, digite um valor igual ou superior que 5")
            return INPUT_PLAN_VALUE
        context.user_data['novo_plano']['valor'] = f"{valor:.2f}"
        nome_plano = context.user_data['novo_plano'].get('nome', 'N/A')
        duracao_plano = context.user_data['novo_plano'].get('duracao', 'N/A')
        
        valor_plano = context.user_data['novo_plano']['valor'].replace('.', '\\.')
        confirmacao_texto = (
            "üöÄ Est√° tudo certo com o plano?\n\n"
            f"> Plano\\: {nome_plano} \n"
            f"> Tempo\\: {duracao_plano}\n"
            f"> Pre√ßo\\: R\\$ " + valor_plano
        )

        keyboard = [
            [InlineKeyboardButton("‚úÖ CRIAR PLANO", callback_data='criar_plano')],
            [InlineKeyboardButton("‚ùå CANCELAR", callback_data='cancelar')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(confirmacao_texto, parse_mode='MarkdownV2', reply_markup=reply_markup)
        return CONFIRMAR_CRIACAO
    except Exception as e:
        await update.message.reply_text(f"Por favor, digite um valor num√©rico v√°lido.")
        print(e)
        return INPUT_PLAN_VALUE


async def confirmar_criacao(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    bot_id = context.user_data.get('bot_id')

    if query.data == 'criar_plano':
        planos = load_plans(bot_id)
        plano_id = f"plano_{len(planos) + 1}"
        planos[plano_id] = context.user_data['novo_plano']
        save_plans(planos, bot_id)
        await query.edit_message_text(text="‚úÖ Plano criado com sucesso!")
    elif query.data == 'cancelar':
        await query.edit_message_text(text="‚ùå A√ß√£o cancelada com sucesso!")

    context.user_data['conversacao_ativa'] = False  # Finaliza a opera√ß√£o
    return ConversationHandler.END

def load_config(bot_id):
    bot = manager.get_bot_by_id(bot_id)
    if bot:
        return json.loads(bot[4])
    else:
        return False
def save_config(config, bot_id):
    manager.update_bot_config(bot_id, config)






# Fun√ß√£o start com suporte para salvar e carregar IDs de usu√°rios espec√≠ficos por bot
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Obt√©m o bot_id do contexto ou define um valor padr√£o (1)
    bot_id = cache['bot_id']
    context.user_data['bot_id'] = bot_id

    # Carrega o chat_id do usu√°rio que enviou o comando /start
    chat_id = update.effective_chat.id

    # Carrega a lista de IDs de usu√°rios para o bot espec√≠fico
    bot = manager.get_bot_by_token(cache['token'])
    user_ids = str(bot[8]).split(':')
    # Verifica se o usu√°rio j√° est√° na lista; se n√£o estiver, adiciona e salva
    if str(chat_id) not in user_ids:
        #print(user_ids)
        user_ids.append(chat_id)
        new_user = ''
        for i in user_ids:
            new_user = new_user+':'+str(i)
        manager.update_bot_users(bot_id, new_user)
        #print(f"Novo usu√°rio {chat_id} adicionado ao arquivo bot{bot_id}_user_ids.json.")

    # Carrega a configura√ß√£o do bot
    config = load_config(bot_id)

    # Configura o bot√£o de a√ß√£o
    button_text = config.get('button_text', "CLIQUE AQUI PARA ACESSAR")
    keyboard = [[InlineKeyboardButton(button_text, callback_data='acessar_agora')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # Envia a m√≠dia inicial, se configurada
    if config.get('start_media'):
        media_type = config['start_media']['type']
        media_id = config['start_media']['file_id']
        if media_type == 'photo':
            await update.message.reply_photo(photo=media_id)
        elif media_type == 'video':
            await update.message.reply_video(video=media_id)

    # Envia o texto inicial configurado
    if config.get('start_text'):
        await update.message.reply_text(config['start_text'])

    if config.get('start_text2'):
        await update.message.reply_text(config['start_text2'], reply_markup=reply_markup)

    print("Comando /start processado com sucesso.")



async def button_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    bot_id = context.user_data.get('bot_id')
    
    planos = load_plans(bot_id)

    # Depura√ß√£o: Verificando os IDs dos planos antes de gerar os bot√µes
    print("Planos dispon√≠veis:", planos.keys())

    # Gera um bot√£o para cada plano dispon√≠vel
    keyboard = [
        [InlineKeyboardButton(f"{plano['nome']} - R$ {plano['valor']}", callback_data=plano_id)]
        for plano_id, plano in planos.items()
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text="Escolha uma oferta abaixo:", reply_markup=reply_markup)

async def plano_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    bot_id = context.user_data.get('bot_id')
    
    planos = load_plans(bot_id)

    # Depura√ß√£o: verificar o callback_data recebido
    data = query.data
    print("Callback data recebido:", data)  # Depura√ß√£o

    if data.startswith("plano_"):
        plano_id = data  # Captura o ID completo
    else:
        plano_id = None

    print("Tentando acessar plano com ID:", plano_id)  # Depura√ß√£o

    plano_escolhido = planos.get(plano_id)
    print("Plano escolhido:", plano_escolhido)  # Depura√ß√£o

    if plano_escolhido:
        # Armazena o plano no contexto para callbacks futuros
        context.user_data['plano_escolhido'] = plano_escolhido
        
        detalhes_plano = (
            f"Plano selecionado com sucesso.\n"
            f"‚Ä¢ T√≠tulo: {plano_escolhido['nome']}\n"
            f"‚Ä¢ Dura√ß√£o: {plano_escolhido['duracao']}\n"
            f"‚Ä¢ Valor: R$ {plano_escolhido['valor']}\n"
        )

        # Cria o bot√£o "Pagar via PIX"
        keyboard = [[InlineKeyboardButton("Pagar via PIX", callback_data='gerar_pix')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # Envia a mensagem com o bot√£o
        await query.message.reply_text(text=detalhes_plano, reply_markup=reply_markup)
    else:
        await query.message.reply_text("O plano selecionado n√£o est√° dispon√≠vel.")

async def gerar_pix_codigo(update: Update, context: CallbackContext) -> None:
    chat_id = update.effective_chat.id
    plano_escolhido = context.user_data.get('plano_escolhido')
    bot_id = context.user_data.get('bot_id')  # Obt√©m o bot_id do contexto

    if not plano_escolhido:
        await context.bot.send_message(chat_id=chat_id, text="Nenhum plano foi selecionado para pagamento.")
        return
    bot = manager.get_bot_by_token(cache['token'])
    
    payment_bot_object = json.loads(bot[7])
    if('token' in payment_bot_object.keys() and 'type' in payment_bot_object.keys()):
        cache['gate_token'] = payment_bot_object['token']
        cache['token_type'] = payment_bot_object['type']
    
    if not 'token_type' in cache:
        await context.bot.send_message(chat_id=chat_id, text="O dono da aplica√ß√£o n√£o cadastrou nenhuma gateway de pagamento.")
        return
    
    await context.bot.send_message(chat_id=chat_id, text="<b>Aguarde um momento enquanto preparamos tudo :)</b>", parse_mode='HTML')
    await context.bot.send_message(chat_id=chat_id, text="Para efetuar o pagamento, utilize a op√ß√£o 'Pagar' > 'PIX copia e Cola' no aplicativo do seu banco.")
    await context.bot.send_message(chat_id=chat_id, text="<b>Copie o c√≥digo abaixo:</b>", parse_mode='HTML')

    if cache['token_type'] == 'PP':
        valor_cents = int(float(plano_escolhido['valor'].replace("R$", "").strip()))
        payment_object = payment.criar_pix_pushinpay(cache['gate_token'], valor_cents, bot_id, chat_id)
        if not 'pix_code' in payment_object.keys():
            await context.bot.send_message(chat_id=chat_id, text="Erro ao gerar o c√≥digo PIX. A resposta da API n√£o cont√©m um c√≥digo v√°lido.")
        else:
            manager.create_payment(payment_object['payment_id'].lower(), chat_id, json.dumps(plano_escolhido), bot_id)
            add_payment_info(payment_object['payment_id'], chat_id)
            pix_code_escaped = escape_markdown_v2(payment_object['pix_code'])
            await context.bot.send_message(chat_id=chat_id, text=f"`{pix_code_escaped}`", parse_mode='MarkdownV2')
            await context.bot.send_message(chat_id=chat_id, text="Por favor, confirme quando realizar o pagamento.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("J√Å FIZ O PAGAMENTO", callback_data="noop")]]))
        
    elif cache['token_type'] == 'MP':

        valor_cents = int(float(plano_escolhido['valor'].replace("R$", "").strip()))
        payment_object = payment.criar_pix_mp(cache['gate_token'], valor_cents)
        if not 'pix_code' in payment_object.keys():
            await context.bot.send_message(chat_id=chat_id, text="Erro ao gerar o c√≥digo PIX. A resposta da API n√£o cont√©m um c√≥digo v√°lido.")
        else:
            manager.create_payment(payment_object['payment_id'], chat_id, json.dumps(plano_escolhido), bot_id)
            add_payment_info(payment_object['payment_id'], chat_id)
            pix_code_escaped = escape_markdown_v2(payment_object['pix_code'])
            await context.bot.send_message(chat_id=chat_id, text=f"`{pix_code_escaped}`", parse_mode='MarkdownV2')
            await context.bot.send_message(chat_id=chat_id, text="Por favor, confirme quando realizar o pagamento.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("J√Å FIZ O PAGAMENTO", callback_data="noop")]]))

async def noop(update: Update, context: CallbackContext):
    # Simplesmente responde √† consulta para evitar timeout no bot√£o
    query = update.callback_query
    await query.answer()

async def pagar_pix(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id
    payment_id = query.data.split('_')[1]
    payment_index = int(query.data.split('_')[2])
    bot_id = context.user_data.get('bot_id')  # Obt√©m o bot_id do contexto

    print(f"Tentando processar o pagamento para payment_id: {payment_id} no chat_id: {chat_id}")

    # Obt√©m as informa√ß√µes de pagamento com o bot_id
    payment_info = manager.get_payment_by_id(payment_id)
    cache['payments'][payment_id]['continue'] = False
    print(f"Informa√ß√µes de pagamento recuperadas: {payment_info}")

    if payment_info[4] != "paid":
        plano_escolhido = json.loads(payment_info[2])
        # Captura o texto ou legenda da mensagem
        query_message_text = (
            query.message.text or query.message.caption
        ).strip().lower() if query.message.text or query.message.caption else None
        print(f"[DEBUG] Texto ou legenda da mensagem enviada: '{query_message_text}'")

        # Busca o desconto correspondente
        configuracoes_recuperacao = load_recuperacao_config(bot_id)
        desconto_configurado = 50  # Desconto padr√£o

        if query_message_text:  # Verifica se o texto ou legenda n√£o est√° vazio
            for config in configuracoes_recuperacao:
                texto_config = config.get("texto", "").strip().lower()
                print(f"[DEBUG] Comparando texto: '{texto_config}' com '{query_message_text}'")
                if texto_config and texto_config in query_message_text:
                    desconto_configurado = config.get("desconto", 50)
                    print(f"[DEBUG] Desconto encontrado: {desconto_configurado}% para o texto '{texto_config}'")
                    break
        else:
            print("[DEBUG] Texto ou legenda da mensagem est√° vazio. Aplicando desconto padr√£o (50%).")
        valor_cents = desconto_configurado

        print(f"Preparando para gerar c√≥digo PIX com valor descontado: {desconto_configurado} reais (Desconto: {desconto_configurado}%)")

        try:
            await gerar_pix_codigo_com_valor(update, context, valor_cents, payment_index, payment_id)
        except Exception as e:
            print(f"[ERRO] Erro ao tentar gerar c√≥digo PIX: {e}")
            await context.bot.send_message(chat_id=chat_id, text="Erro inesperado ao se comunicar com a API de pagamento. Por favor, tente novamente.")
    else:
        print(f"[DEBUG] Nenhuma a√ß√£o necess√°ria ou pagamento j√° processado para payment_id: {payment_id}")
        await context.bot.send_message(chat_id=chat_id, text="Nenhum pagamento pendente ou n√£o autorizado para gerar PIX.")

async def gerar_pix_codigo_com_valor(update: Update, context: CallbackContext, valor_cents: float, index, payment_cur) -> None:
    chat_id = update.effective_chat.id
    plano_escolhido = context.user_data.get('plano_escolhido')
    bot_id = context.user_data.get('bot_id')  # Obt√©m o bot_id do contexto

    if not plano_escolhido:
        await context.bot.send_message(chat_id=chat_id, text="Nenhum plano foi selecionado para pagamento.")
        return
    bot = manager.get_bot_by_token(cache['token'])
    
    payment_bot_object = json.loads(bot[7])
    if('token' in payment_bot_object.keys() and 'type' in payment_bot_object.keys()):
        cache['gate_token'] = payment_bot_object['token']
        cache['token_type'] = payment_bot_object['type']
    
    if not 'token_type' in cache:
        await context.bot.send_message(chat_id=chat_id, text="O dono da aplica√ß√£o n√£o cadastrou nenhuma gateway de pagamento.")
        return
    
    await context.bot.send_message(chat_id=chat_id, text="<b>Aguarde um momento enquanto preparamos tudo :)</b>", parse_mode='HTML')
    await context.bot.send_message(chat_id=chat_id, text="Para efetuar o pagamento, utilize a op√ß√£o 'Pagar' > 'PIX copia e Cola' no aplicativo do seu banco.")
    await context.bot.send_message(chat_id=chat_id, text="<b>Copie o c√≥digo abaixo:</b>", parse_mode='HTML')

    if cache['token_type'] == 'PP':
        #valor_cents = int(float(plano_escolhido['valor'].replace("R$", "").strip()))
        payment_object = payment.criar_pix_pushinpay(cache['gate_token'], valor_cents, bot_id, chat_id)
        print(payment_object)
        if not 'pix_code' in payment_object.keys():
            await context.bot.send_message(chat_id=chat_id, text="Erro ao gerar o c√≥digo PIX. A resposta da API n√£o cont√©m um c√≥digo v√°lido.")
        else:
            plano_escolhido['valor'] = valor_cents
            manager.create_payment(payment_object['payment_id'].lower(), chat_id, json.dumps(plano_escolhido), bot_id)
            add_payment_recovery(payment_cur, payment_object['payment_id'])
            pix_code_escaped = escape_markdown_v2(payment_object['pix_code'])
            await context.bot.send_message(chat_id=chat_id, text=f"`{pix_code_escaped}`", parse_mode='MarkdownV2')

            await context.bot.send_message(chat_id=chat_id, text="Por favor, confirme quando realizar o pagamento.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("J√Å FIZ O PAGAMENTO", callback_data="noop")]]))
        
    elif cache['token_type'] == 'MP':
        #valor_cents = int(float(plano_escolhido['valor'].replace("R$", "").strip()))
        payment_object = payment.criar_pix_mp(cache['gate_token'], valor_cents)
        if not 'pix_code' in payment_object.keys():
            await context.bot.send_message(chat_id=chat_id, text="Erro ao gerar o c√≥digo PIX. A resposta da API n√£o cont√©m um c√≥digo v√°lido.")
        else:
            plano_escolhido['valor'] = valor_cents
            manager.create_payment(payment_object['payment_id'], chat_id, json.dumps(plano_escolhido), bot_id)
            add_payment_recovery(payment_cur, payment_object['payment_id'])
            pix_code_escaped = escape_markdown_v2(payment_object['pix_code'])
            await context.bot.send_message(chat_id=chat_id, text=f"`{pix_code_escaped}`", parse_mode='MarkdownV2')

            await context.bot.send_message(chat_id=chat_id, text="Por favor, confirme quando realizar o pagamento.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("J√Å FIZ O PAGAMENTO", callback_data="noop")]]))



# Handler para /texto
async def texto(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("Comando /texto iniciado.")

    # Verifica se j√° h√° um comando ativo
    if await verificar_comando_ativo(update, context):
        print("Encerrando /texto devido a comando ativo.")
        return ConversationHandler.END

    # Marca o comando como ativo antes de iniciar a fun√ß√£o
    context.user_data['conversacao_ativa'] = True
    print("Comando /texto marcado como ativo. Estado atual:", context.user_data.get('conversacao_ativa', False))

    chat_id = update.effective_chat.id
    bot_token = context.bot.token  # Obt√©m o token do bot atual

    # Verifica se o usu√°rio √© administrador para o bot atual
    if not is_admin(chat_id):
        print("Usu√°rio n√£o autorizado para /texto.")
        context.user_data['conversacao_ativa'] = False
        return  # Sai da fun√ß√£o se o usu√°rio n√£o for administrador

    # Obt√©m o bot_id do contexto global `bot_data` ou `user_data`
    bot_id = context.user_data.get('bot_id') or context.bot_data.get('bot_id')
    if bot_id is None:
        await update.message.reply_text("Erro ao identificar o bot_id. Por favor, tente novamente.")
        print("Erro: bot_id n√£o identificado.")
        context.user_data['conversacao_ativa'] = False
        return ConversationHandler.END

    # Armazena o bot_id no user_data para as pr√≥ximas fun√ß√µes
    context.user_data['bot_id'] = bot_id
    print("bot_id armazenado:", bot_id)

    # Define a conversa como ativa e pede o texto ao usu√°rio
    keyboard = [[create_cancel_button()]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üìù  Envie aqui o texto que deseja:", reply_markup=reply_markup)
    print("Mensagem solicitando texto enviada.")
    return INPUT_TEXT


async def recebe_tempo_recuperacao(update: Update, context: ContextTypes.DEFAULT_TYPE):
    bot_id = context.user_data.get('bot_id')
    configuracoes_recuperacao = context.user_data.get('configuracoes_recuperacao')

    index = context.user_data['mensagem_index']
    try:
        configuracoes_recuperacao[index]["tempo"] = int(update.message.text)
        save_recuperacao_config(configuracoes_recuperacao, bot_id)
        await update.message.reply_text("‚úÖ Configura√ß√£o de mensagem de recupera√ß√£o salva com sucesso!")
    except ValueError:
        await update.message.reply_text("‚ùóÔ∏è Por favor, envie um n√∫mero v√°lido para o tempo.")
        return INPUT_TEMPO_RECUPERACAO

    # Redefine o estado de opera√ß√£o ativa
    context.user_data['conversacao_ativa'] = False
    context.user_data.clear()  # Limpa todos os dados remanescentes do fluxo
    print("Fluxo de recupera√ß√£o de compra finalizado. Estado redefinido.")
    return ConversationHandler.END



async def texto2(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("Comando /texto2 iniciado")
    # Verifica se j√° h√° um comando ativo
    if await verificar_comando_ativo(update, context):
        return ConversationHandler.END

    await reset_conversation(update, context)  # Limpa conversas anteriores
    chat_id = update.effective_chat.id

    # Recupera o token do bot em uso a partir do contexto
    token_do_bot = context.bot_data.get('token')  # Certifique-se de que o token est√° sendo armazenado corretamente
    if not token_do_bot:
        await update.message.reply_text("Erro: N√£o foi poss√≠vel identificar o token do bot em uso.")
        return ConversationHandler.END

    # Verifica se o usu√°rio √© admin do bot associado a este token
    if not is_admin(chat_id):
        return ConversationHandler.END

    # Recupera o bot_id do contexto global `bot_data` ou `user_data`
    bot_id = context.user_data.get('bot_id') or context.bot_data.get('bot_id')
    if bot_id is None:
        await update.message.reply_text("Erro ao identificar o bot_id. Por favor, tente novamente.")
        return ConversationHandler.END

    # Armazena o bot_id no user_data para uso nas pr√≥ximas fun√ß√µes
    context.user_data['bot_id'] = bot_id

    # Marca a conversa como ativa e pede o texto ao usu√°rio
    context.user_data['conversacao_ativa'] = True
    keyboard = [[create_cancel_button()]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text("üìù Envie aqui o texto 2 que deseja:", reply_markup=reply_markup)
    return INPUT_TEXT2






async def recebe_texto2(update: Update, context: ContextTypes.DEFAULT_TYPE):
    bot_id = context.user_data.get('bot_id')  # Recupera o bot_id do contexto
    if bot_id is None:
        await update.message.reply_text("Erro ao identificar o bot_id. Por favor, tente novamente.")
        return ConversationHandler.END

    config = load_config(bot_id)  # Passa o bot_id para carregar a configura√ß√£o espec√≠fica
    config['start_text2'] = update.message.text.strip()
    save_config(config, bot_id)  # Passa o bot_id para salvar a configura√ß√£o espec√≠fica

    await update.message.reply_text("‚úÖ Mensagem do texto 2 atualizada com sucesso!")
    
    # Limpa o estado da conversa√ß√£o ativa e encerra o ConversationHandler
    context.user_data['conversacao_ativa'] = False
    return ConversationHandler.END


async def recebe_texto(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Recupera o `bot_id` do `user_data`
    bot_id = context.user_data.get('bot_id')
    if bot_id is None:
        await update.message.reply_text("Erro ao identificar o bot_id. Por favor, tente novamente.")
        return ConversationHandler.END

    # Carrega a configura√ß√£o espec√≠fica do bot
    config = load_config(bot_id)
    config['start_text'] = update.message.text.strip()
    save_config(config, bot_id)  # Salva a configura√ß√£o com o `bot_id`

    await update.message.reply_text("‚úÖ Mensagem de boas-vindas atualizada com sucesso!")
    
    # Limpa o estado da conversa√ß√£o ativa e encerra o ConversationHandler
    context.user_data['conversacao_ativa'] = False
    return ConversationHandler.END



# Handler para /midia_inicial
async def midia_inicial(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await verificar_comando_ativo(update, context):  # Verifica se h√° outra opera√ß√£o ativa
        return ConversationHandler.END

    await reset_conversation(update, context)  # Limpa conversas anteriores
    chat_id = update.effective_chat.id
    bot_token = context.bot.token  # Obt√©m o token do bot atual

    # Verifica se o usu√°rio √© administrador do bot atual
    if not is_admin(chat_id):
        return ConversationHandler.END

    bot_id = context.user_data.get('bot_id') or context.bot_data.get('bot_id')
    if bot_id is None:
        await update.message.reply_text("Erro ao identificar o bot_id. Por favor, tente novamente.")
        return ConversationHandler.END

    context.user_data['bot_id'] = bot_id
    context.user_data['conversacao_ativa'] = True  # Marca a conversa como ativa

    keyboard = [[InlineKeyboardButton("‚ùå CANCELAR", callback_data='cancelar')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "üé¨ Adicione a m√≠dia para a abertura do bot (foto ou v√≠deo).",
        reply_markup=reply_markup
    )
    return INPUT_MEDIA  # Retorna o estado para esperar a m√≠dia


async def recebe_midia(update: Update, context: ContextTypes.DEFAULT_TYPE):
    bot_id = context.user_data.get('bot_id')
    if bot_id is None:
        await update.message.reply_text("Erro ao identificar o bot_id. Por favor, tente novamente.")
        return ConversationHandler.END

    config = load_config(bot_id)

    try:
        if update.message.photo:
            photo_file = await update.message.photo[-1].get_file()
            config['start_media'] = {'type': 'photo', 'file_id': photo_file.file_id}
            await update.message.reply_text("‚úÖ Foto adicionada com sucesso!")

        elif update.message.video:
            video_file = await update.message.video.get_file()
            config['start_media'] = {'type': 'video', 'file_id': video_file.file_id}
            await update.message.reply_text("‚úÖ V√≠deo adicionada com sucesso!")

        else:
            await update.message.reply_text("‚ùå Tipo de m√≠dia n√£o suportado. Por favor, envie uma foto ou um v√≠deo.")
            return INPUT_MEDIA
    except BadRequest as e:
        await update.message.reply_text("‚ùå Erro ao enviar o arquivo. Tente novamente.")
    
    save_config(config, bot_id)
    context.user_data['conversacao_ativa'] = False  # Finaliza a opera√ß√£o
    return ConversationHandler.END


async def cancel(update, context):
    # Limpa o estado do usu√°rio
    print("macaco cancelou")
    
    context.user_data['conversacao_ativa'] = False  # Garante que `conversacao_ativa` seja redefinido
    print("Todos os estados do usu√°rio foram redefinidos pelo comando /cancel.")

    # Envia uma mensagem de confirma√ß√£o ao usu√°rio
    try:
        bot_instance = bot_application.bot
        chat_id = update.effective_chat.id
        context.user_data.clear()
        await bot_instance.send_message(chat_id=chat_id, text="‚ùå Todas as opera√ß√µes foram canceladas com sucesso.")
        return ConversationHandler.END
    except Exception as e:
        print(f'erro ao cancelar: {e}')
                        # Caso n√£o haja m√≠dia, apenas envia a mensagem de texto
        
    if update.callback_query:
        await update.callback_query.message.reply_text("‚ùå Todas as opera√ß√µes foram canceladas com sucesso.")
        await update.callback_query.answer()
    else:
        await update.message.reply_text("‚ùå Todas as opera√ß√µes foram canceladas com sucesso.")

    # Finaliza qualquer estado ativo no ConversationHandler
    context.user_data.clear()
    return ConversationHandler.END


def run_bot(token, bot_id):
    global bot_application  # Declara que bot_application √© global
    print(f"Iniciando bot com token: {token} e bot_id: {bot_id}")
    bot = manager.get_bot_by_token(token)
    # Cria a aplica√ß√£o do bot
    application = Application.builder().token(token).build()
    bot_application = application
    # Adiciona informa√ß√µes ao bot_data
    cache['owner'] = bot[2]
    cache['bot_id'] = bot_id
    cache['token'] = token
    cache['grupo'] = bot[10]
    payment_object = json.loads(bot[7])
    if('token' in payment_object.keys() and 'token' in payment_object.keys()):
        cache['gate_token'] = payment_object['token']
        cache['token_type'] = payment_object['type']
    
    application.bot_data['bot_id'] = bot_id
    application.bot_data['token'] = token
    
    # Outros setups podem ser adicionados aqui (handlers, comandos, etc.)

        
    fallbacks = [
    CommandHandler("cancel", cancel),
    CallbackQueryHandler(cancel, pattern='cancelar')
]

    # Adiciona o ConversationHandler para /texto
    conv_handler_texto = ConversationHandler(
        entry_points=[CommandHandler("texto", texto)],
        states={
            INPUT_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, recebe_texto)]
        },
        fallbacks=[CommandHandler("cancel", cancel), CallbackQueryHandler(cancel, pattern='cancelar')]
    )

    # ConversationHandler para o comando /texto2
    conv_handler_texto2 = ConversationHandler(
    entry_points=[CommandHandler("texto2", texto2)],
    states={
        INPUT_TEXT2: [MessageHandler(filters.TEXT & ~filters.COMMAND, recebe_texto2)]
    },
    fallbacks=[CommandHandler("cancel", cancel), CallbackQueryHandler(cancel, pattern='cancelar')]
)
    # Adiciona o ConversationHandler para /midia_inicial
    conv_handler_midia = ConversationHandler(
    entry_points=[CommandHandler("midia_inicial", midia_inicial)],
    states={
        INPUT_MEDIA: [MessageHandler(filters.PHOTO | filters.VIDEO, recebe_midia)]
    },
    fallbacks=[CommandHandler("cancel", cancel), CallbackQueryHandler(cancel, pattern='cancelar')]
)
    
    conv_handler_texto_botao = ConversationHandler(
    entry_points=[CommandHandler("texto_botao", texto_botao)],
    states={
        INPUT_TEXT_BUTTON: [MessageHandler(filters.TEXT & ~filters.COMMAND, salvar_texto_botao)]
    },
    fallbacks=[CommandHandler("cancel", cancel)]
)
    
    conv_handler_disparo = ConversationHandler(
    entry_points=[CommandHandler('disparo', disparo)],
    states={
        MEDIA: [MessageHandler(filters.PHOTO | filters.VIDEO, receber_midia)],
        TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, receber_texto)],
        LINK: [MessageHandler(filters.TEXT & ~filters.COMMAND, receber_link)],
        CONFIRM: [CallbackQueryHandler(confirmacao_disparo)]
    },
    fallbacks=[CommandHandler("cancel", cancel)]
)


    
    conv_handler_deletar_recuperacao = ConversationHandler(
    entry_points=[CommandHandler("deletar_recuperacao", deletar_recuperacao)],
    states={
        SELECIONAR_MENSAGEM_DELETAR: [
            CallbackQueryHandler(confirmar_deletar_recuperacao, pattern="^deletar_mensagem_"),
            CallbackQueryHandler(cancel, pattern="cancelar")
        ]
    },
    fallbacks=[
        CommandHandler("cancel", cancel),  # Suporte ao comando /cancel
        CallbackQueryHandler(cancel, pattern="cancelar")  # Suporte ao bot√£o "CANCELAR"
    ]
)
    conv_handler_gateway = ConversationHandler(
    entry_points=[CommandHandler("gateway", gateway)],
    states={
        INPUT_TOKEN: [CallbackQueryHandler(recebe_token)],
        TOKEN_RETRY: [MessageHandler(filters.TEXT & ~filters.COMMAND, repete_token)]#,
        #CANCEL: [CallbackQueryHandler(cancel, pattern='cancelar')]
    },
    fallbacks=[
        CommandHandler("cancel", cancel),  # Suporte ao comando /cancel
        CallbackQueryHandler(cancel, pattern="cancelar")  # Suporte ao bot√£o "CANCELAR"
    ]
)

    conv_handler_remover_texto = ConversationHandler(
    entry_points=[CommandHandler("remover_texto", remover_texto)],
    states={},
    fallbacks=[CommandHandler("cancel", cancel)]
)
    
    conv_handler_recuperacao_compra = ConversationHandler(
    entry_points=[CommandHandler("recuperacao_compra", recuperacao_compra)],
    states={
        SELECIONAR_MENSAGEM: [CallbackQueryHandler(selecionar_mensagem)],
        INPUT_MEDIA_RECUPERACAO: [MessageHandler(filters.PHOTO | filters.VIDEO, recebe_midia_recuperacao)],
        INPUT_TEXTO_RECUPERACAO: [MessageHandler(filters.TEXT & ~filters.COMMAND, recebe_texto_recuperacao)],
        INPUT_DESCONTO_RECUPERACAO: [MessageHandler(filters.TEXT & ~filters.COMMAND, recebe_desconto_recuperacao)],
        INPUT_TEMPO_RECUPERACAO: [MessageHandler(filters.TEXT & ~filters.COMMAND, recebe_tempo_recuperacao)],
    },
    fallbacks=[CommandHandler("cancel", cancel), CallbackQueryHandler(cancel, pattern='cancelar')]
)

    # Adiciona o ConversationHandler para /criar_plano
    conv_handler_criar_plano = ConversationHandler(
    entry_points=[CommandHandler("criar_plano", criar_plano)],
    states={
        INPUT_PLAN_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, recebe_nome_plano)],
        INPUT_PLAN_DURATION: [CallbackQueryHandler(recebe_duracao_plano)],
        INPUT_PLAN_CUSTON: [MessageHandler(filters.TEXT & ~filters.COMMAND, recebe_quantidade_plano)],
        INPUT_PLAN_VALUE: [MessageHandler(filters.TEXT & ~filters.COMMAND, recebe_valor_plano)],
        CONFIRMAR_CRIACAO: [CallbackQueryHandler(confirmar_criacao, pattern='^(criar_plano|cancelar)$')]
    },
    fallbacks=[CommandHandler("cancel", cancel), CallbackQueryHandler(cancel, pattern='^cancelar$')]
)
    conv_handler_upsell = ConversationHandler(
    entry_points=[CommandHandler("upsell", upsell)],
    states={
        INPUT_UPSELL_CONTENT: [MessageHandler(filters.TEXT | filters.PHOTO | filters.VIDEO, recebe_midia_upsell)],
        INPUT_UPSELL_LINK: [MessageHandler(filters.TEXT & ~filters.COMMAND, recebe_link_upsell)]
    },
    fallbacks=[CommandHandler("cancel", cancel), CallbackQueryHandler(cancel, pattern='cancelar')]
)

    
    # Adiciona o ConversationHandler para /grupo_id
    conv_handler_grupo_id = ConversationHandler(
    entry_points=[CommandHandler("vip", grupo_id)],
    states={
        INPUT_GRUPO_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, recebe_grupo_id)]
    },
    fallbacks=[CommandHandler("cancel", cancel), CallbackQueryHandler(cancel, pattern='cancelar')]
)
 
    conv_handler_remover_midia = ConversationHandler(
    entry_points=[CommandHandler("remover_midia", remover_midia)],
    states={},
    fallbacks=[CommandHandler("cancel", cancel)]
)

    conv_handler_excluir_plano = ConversationHandler(
    entry_points=[CommandHandler("excluir_plano", excluir_plano)],
    states={
        SELECT_PLAN_TO_DELETE: [CallbackQueryHandler(confirmar_exclusao_plano, pattern="^delete_")]
    },
    fallbacks=[CommandHandler("cancel", cancel)]
)
    application.add_handler(ChatJoinRequestHandler(check_join_request))
    application.add_handler(conv_handler_texto)
    application.add_handler(conv_handler_texto2)
    application.add_handler(conv_handler_midia)
    application.add_handler(CommandHandler("start", start), group=0)
    application.add_handler(conv_handler_grupo_id)
    application.add_handler(conv_handler_upsell)
    application.add_handler(conv_handler_disparo)
    application.add_handler(MessageHandler(filters.COMMAND, handle_commands), group=1)
    application.add_handler(CallbackQueryHandler(button_callback_handler, pattern='^acessar_agora$'))
    application.add_handler(CallbackQueryHandler(plano_callback_handler, pattern='^plano_'))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_all_messages), group=2)
    application.add_handler(CallbackQueryHandler(gerar_pix_codigo, pattern='^gerar_pix$'))
    application.add_handler(CallbackQueryHandler(pagar_pix, pattern='^pagar_'))
    application.add_handler(conv_handler_texto_botao)
    application.add_handler(conv_handler_deletar_recuperacao)
    application.add_handler(CallbackQueryHandler(noop, pattern='noop'))
    application.add_handler(CommandHandler("remover_upsell", remover_upsell))
    application.add_handler(conv_handler_excluir_plano)
    application.add_handler(conv_handler_gateway)
    application.add_handler(conv_handler_criar_plano)
    application.add_handler(conv_handler_remover_texto)
    application.add_handler(conv_handler_recuperacao_compra)
    application.add_handler(CommandHandler("comandos", comandos))
    application.add_handler(conv_handler_remover_midia)
    application.add_handler(CallbackQueryHandler(cancel, pattern='cancelar'))
    application.add_handler(CommandHandler("cancel", cancel))

    print("Handler para /start adicionado.")  # Confirma que o handler foi adicionado
    try:
        #loop = asyncio.new_event_loop()  # Cria um novo loop de eventos
        #asyncio.set_event_loop(loop)    # Define o loop de eventos na thread atual
        cache['payment_loop'] = asyncio.new_event_loop()
        asyncio.set_event_loop(cache['payment_loop'])
        # Agendar verifica√ß√£o de expira√ß√£o antes de iniciar o polling
        bot_instance = application.bot  # Define a inst√¢ncia do bot
        cache['payment_loop'].create_task(payment_task())
        cache['payment_loop'].create_task(agendar_verificacao_expiracao(bot_id, bot_instance))  # Adiciona a verifica√ß√£o de expira√ß√£o
        print("Bot iniciado e pronto para receber comandos.")  # Log para indicar que o bot est√° pronto
        try:
            application.run_polling()  # Inicia o polling do bot Telegram
        except Conflict as e:
            print(f"Erro de conflito detectado: {e}")
            # Adicione a√ß√µes para corrigir o conflito, como encerrar outras inst√¢ncias
            exit(1)  # Finaliza o script para evitar m√∫ltiplas execu√ß√µes
    except Exception as e:
        print(f"[ERRO] Problema ao iniciar o bot: {e}")

    finally:
        cache['payment_loop'].run_until_complete(cache['payment_loop'].shutdown_asyncgens())  # Encerra geradores ass√≠ncronos, se houver
        cache['payment_loop'].close()  # Fecha o loop de eventos

if __name__ == '__main__':
    import sys
    if len(sys.argv) < 2:
        print("Por favor, forne√ßa o token do bot como argumento.")
    else:
        #asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
        run_bot(sys.argv[1])